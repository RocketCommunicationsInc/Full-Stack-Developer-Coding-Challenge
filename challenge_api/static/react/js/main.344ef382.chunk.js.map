{"version":3,"sources":["logo.svg","api/api.js","components/AstroTable.js","components/Header.js","components/Modal.js","containers/Main.js","App.js","reportWebVitals.js","index.js","config/endpoints.js"],"names":["api","GET","params","config","cb","error","a","axios","get","url","crossdomain","res","data","POST","post","response","PUT","AstroTable","props","styles","banner","background","color","display","showCount","fontSize","justifyContent","padding","textAlign","width","borderCollapse","borderSpacing","borderStyle","borderWidth","borderColor","overflow","columns","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","style","text","length","generateCount","groups","Object","keys","group","push","toUpperCase","generateGroups","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","border","render","row","getRowProps","cells","cell","getCellProps","backgroundColor","paddingLeft","paddingRight","header","backgrounColor","float","user","Header","CustomButton","withStyles","theme","root","Button","className","class","appname","version","children","username","id","onClick","e","action","Modal","input","useState","inputs","setInputs","handleInputChange","updatedInputs","target","value","modalInfo","Dialog","maxWidth","fullWidth","open","onClose","handleClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","responseText","TextField","label","variant","onChange","generateInputs","DialogActions","submitAction","autoFocus","submitText","Main","setOpen","setModalInfo","setResponseText","setUser","contacts","setContacts","contactStateGroups","setContactStateGroups","alerts","setAlerts","login","setTimeout","console","password","endpoints","LOGIN","register","status","REGISTER","useEffect","contactCols","alertCols","fetchData","auth","btoa","unescape","encodeURIComponent","col","name","includes","accessor","contactState","DATA","currentTarget","height","App","src","logo","alt","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","module","exports","freeze","base","param"],"mappings":"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","file":"js/main.344ef382.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"media/logo.6ce24c58.svg\";","import axios from 'axios';\r\n\r\nconst api = {\r\n    GET: async (params, config, cb, error) => {\r\n        try {\r\n            let res = await axios.get(params.url, config, { crossdomain: true });\r\n            cb(res.data);\r\n        } catch (e) {\r\n            error(e);\r\n        }\r\n    },\r\n\r\n    POST: async (params, data, cb, error) => {\r\n        try {\r\n            let res = await axios.post(params.url, data, { crossdomain: true });\r\n            cb(res.data);\r\n        } catch (e) {\r\n            error(e.response);\r\n        }\r\n    },\r\n\r\n    PUT: async (params, cb, error) => {\r\n\r\n    }\r\n}\r\n\r\nexport default api;","import { useTable, useSortBy } from 'react-table';\r\n\r\nexport default function AstroTable(props) {\r\n\r\n    const styles = {\r\n        banner: {\r\n            background: '#203246',\r\n            color: '#ffffff',\r\n            display: props.showCount ? 'flex' : 'block',\r\n            fontSize: 22,\r\n            justifyContent: 'space-between',\r\n            padding: '5px',\r\n            textAlign: 'left',\r\n        },\r\n        'rux-table': {\r\n            width: '100%',\r\n            borderCollapse: 'separate',\r\n            borderSpacing: '0px',\r\n            color: '#292A2D',\r\n            borderStyle: 'solid',\r\n            borderWidth: '1px',\r\n            borderColor:'#eaeef4',\r\n            background: '#ffffff',\r\n            textAlign: 'left',\r\n            overflow: 'scroll',\r\n          }\r\n    };\r\n\r\n    const { columns, data } = props;\r\n\r\n    const generateCount = () => {\r\n        let text = '';\r\n\r\n        if (props.showCount) {\r\n            text = props.data.length + ' Contacts';\r\n        }\r\n\r\n        return text;\r\n    };\r\n\r\n    const generateGroups = () => {\r\n        let text = [];\r\n\r\n        if (props.groups) {\r\n            for (let group of Object.keys(props.groups)) {\r\n                text.push(<div>{group.toUpperCase()}: {props.groups[group]}</div>)\r\n            }\r\n        }\r\n        return text;\r\n    };\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow\r\n    } = useTable({ columns, data }, useSortBy);\r\n\r\n    return (\r\n        <div>\r\n            <div style={styles.banner}>{generateCount()} <div>{generateGroups()}</div></div>\r\n            <table { ...getTableProps() } style={styles['rux-table']}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th\r\n                                    {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                                    style={{\r\n                                        color: '#a9b2bc',\r\n                                        padding: '10px',\r\n                                        border: 'solid 1px gray',\r\n                                        background: '#283f58',\r\n                                    }}\r\n                                >\r\n                                    {column.render('Header')}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map(row => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return (\r\n                                        <td\r\n                                            {...cell.getCellProps()}\r\n                                            style={{\r\n                                                color: 'white',\r\n                                                padding: '10px',\r\n                                                border: 'solid 1px gray',\r\n                                                background: '#203246',\r\n                                            }}\r\n                                        >\r\n                                            {cell.render('Cell')}\r\n                                        </td>\r\n                                    )\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}","import Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { React } from 'react';\r\nimport { RuxGlobalStatusBar } from '@astrouxds/rux-global-status-bar/rux-global-status-bar.js';\r\n\r\nfunction Header(props) {\r\n\r\n    const CustomButton = withStyles((theme) => ({\r\n        root: {\r\n            backgroundColor: '#172635',\r\n            color: 'white'\r\n        }\r\n    }))(Button); \r\n\r\n    return (\r\n        <div className='row' style={styles.banner}>\r\n            <rux-global-status-bar class='dark-theme' appname='Astro UI' version='0.1'></rux-global-status-bar>\r\n            {props.children}\r\n            {!props.username && <div className='row' style={{ backgroundColor: '#282c34', display: 'inline-flex' }}>\r\n               <CustomButton\r\n                    color='primary'\r\n                    id='register'\r\n                    onClick={(e) => props.action(e)}\r\n                >\r\n                    Register\r\n                </CustomButton>\r\n                <CustomButton \r\n                    color='primary'\r\n                    id='login'\r\n                    onClick={(e) => props.action(e)}\r\n                >\r\n                    Login\r\n                </CustomButton>\r\n            </div> }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst styles = {\r\n    banner: {\r\n        backgroundColor: '#172635',\r\n        color: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        paddingLeft: '20px',\r\n        paddingRight: '20px'\r\n    },\r\n    header: {\r\n        backgrounColor: '#282c34',\r\n        color: 'white',\r\n        float: 'right'\r\n    },\r\n    user: {\r\n        color: '#61dafb',\r\n        display: 'inline',\r\n        float: 'left',\r\n        fontSize: 11,\r\n        paddingLeft: '10px'\r\n    }\r\n}\r\n\r\nexport default Header;","import { React, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default function Modal(props) {\r\n\r\n    const styles = {\r\n        input: {\r\n            padding: '10px'\r\n        }\r\n    };\r\n\r\n    const [inputs, setInputs] = useState({});\r\n\r\n    const generateInputs = () => {\r\n        let inputs = [];\r\n        for (let input of props.modalInfo.inputs) {\r\n            inputs.push(\r\n                <TextField \r\n                    id={input.id} \r\n                    key={input.id}\r\n                    label={input.label} \r\n                    variant='outlined'\r\n                    style={styles.input}\r\n                    value={inputs.id}\r\n                    onChange={handleInputChange}\r\n                />\r\n            )\r\n        }\r\n\r\n        return inputs;\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        let updatedInputs = { ...inputs };\r\n        updatedInputs[e.target.id] = e.target.value;\r\n        setInputs(updatedInputs);\r\n    };\r\n\r\n    return (\r\n        props.modalInfo ? <div>\r\n            <Dialog\r\n                maxWidth={'lg'}\r\n                fullWidth={true}\r\n                open={props.open}\r\n                onClose={props.handleClose}\r\n                aria-labelledby='alert-dialog-title'\r\n                aria-describedby='alert-dialog-description'\r\n            >\r\n                <DialogTitle id='alert-dialog-title'>{props.modalInfo.header}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id='alert-dialog-description'>\r\n                        {props.modalInfo.text}  \r\n                        <div style={{textAlign: 'center'}}>\r\n                            {props.responseText}\r\n                        </div>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                {generateInputs()}\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={() => props.modalInfo.submitAction(inputs)} \r\n                        color='primary' \r\n                        autoFocus\r\n                    >\r\n                        {props.modalInfo.submitText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div> : ''\r\n    );\r\n}","import api from '../api/api';\r\nimport '../App.css';\r\nimport endpoints from '../config/endpoints';\r\nimport AstroTable from '../components/AstroTable';\r\nimport Header from '../components/Header';\r\nimport Modal from '../components/Modal';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function Main() {\r\n    const [open, setOpen] = useState(false);\r\n    const [modalInfo, setModalInfo] = useState();\r\n    const [responseText, setResponseText] = useState();\r\n    const [user, setUser] = useState(null);\r\n    const [contacts, setContacts] = useState(null);\r\n    const [contactStateGroups, setContactStateGroups] = useState(null);\r\n    const [alerts, setAlerts] = useState(null);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setResponseText('');\r\n    };\r\n\r\n    const login = async (inputs) => {\r\n\r\n        const cb = (res) => {\r\n            setUser(res);\r\n            setResponseText('Login successful');\r\n            setTimeout(() => handleClose(), 1000);\r\n        }\r\n\r\n        const error = (e) => {\r\n            console.error(e);\r\n            setResponseText('Invalid username or password')\r\n        }\r\n        \r\n        let data = {\r\n            user: inputs.username,\r\n            password: inputs.password\r\n        }\r\n\r\n        await api.POST({ url: endpoints.LOGIN() }, data, cb, error);\r\n    };\r\n\r\n    const register = async (inputs) => {\r\n        const cb = (res) => {\r\n            setResponseText(`Registration successful`);\r\n            setUser(res);\r\n            setTimeout(() => handleClose(), 1000);\r\n        };\r\n\r\n        const error = (e) => {\r\n            if (e.status === 500)\r\n                setResponseText('User already exists');\r\n            else\r\n                setResponseText(e.status)\r\n        };\r\n\r\n        await api.POST({ url: endpoints.REGISTER() }, { user: inputs.username, password: inputs.password }, cb, error);\r\n    };\r\n\r\n    const headerClick = (e) => {\r\n\r\n        switch (e.currentTarget.id) {\r\n            case 'register':\r\n                setModalInfo({\r\n                    header: 'Register',\r\n                    submitText: 'Submit',\r\n                    inputs: [\r\n                        { id: 'username', label: 'Username' },\r\n                        { id: 'password', label: 'Password' }\r\n                    ],\r\n                    submitAction: register\r\n                });\r\n                setOpen(true);\r\n                break;\r\n            case 'login':\r\n                setModalInfo({\r\n                    text: 'Enter your username and token',\r\n                    header: 'Login',\r\n                    submitText: 'Login',\r\n                    inputs: [\r\n                        { id: 'username', label: 'Username' },\r\n                        { id: 'password', label: 'Password' }\r\n                    ],\r\n                    submitAction: login\r\n                });\r\n                setOpen(true);\r\n                break;\r\n            default:\r\n                setOpen(true);\r\n                break;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const contactCols = ['contactName', 'contactStatus', 'contactBeginTimestamp', 'contactEndTimestamp'];\r\n        const alertCols = ['errorMessage', 'errorCategory', 'errorTime'];\r\n\r\n        const fetchData = async (params) => {\r\n            let auth = {\r\n                headers: {\r\n                    'Authorization': 'Basic ' + btoa(unescape(encodeURIComponent(user.username + ':' + user.password)))\r\n                }\r\n            }\r\n\r\n            const cb = (res) => {\r\n                let headers = [];\r\n\r\n                for (let col of Object.keys(res[0])) {\r\n                    if ((params.name === 'alerts' && alertCols.includes(col)) || (params.name === 'contacts' && contactCols.includes(col))) {\r\n                        headers.push({\r\n                            Header: col,\r\n                            accessor: col\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (params.name === 'alerts')\r\n                    setAlerts({ columns: headers, data: res });\r\n                else {\r\n                    let groups = {}\r\n                    for (let row of res) {\r\n                        if (!groups[row.contactState])\r\n                            groups[row.contactState] = 0;\r\n                        groups[row.contactState] ++;\r\n                    }\r\n                    setContactStateGroups(groups);\r\n                    setContacts({ columns: headers, data: res });\r\n                }\r\n            };\r\n\r\n            const error = (res) => {\r\n                console.error(res);\r\n            };\r\n\r\n            await api.GET({ url: endpoints.DATA(params.name) }, auth, cb, error);\r\n        };\r\n\r\n        if (user) {\r\n            fetchData({ name: 'alerts' });\r\n            fetchData({ name: 'contacts' });\r\n        }\r\n    }, [user]);\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                action={headerClick}\r\n                username={user?.username}\r\n            >\r\n            </Header>\r\n            <Modal \r\n                open={open}\r\n                handleClose={handleClose}\r\n                modalInfo={modalInfo}\r\n                responseText={responseText}\r\n            />\r\n            { user && alerts ?\r\n                <AstroTable \r\n                    data={alerts.data}\r\n                    columns={alerts.columns}\r\n                /> : null\r\n            }\r\n            <div style={{ backgroundColor: '#172635', height: '20px' }}/>\r\n            { user && contacts ?\r\n                <AstroTable \r\n                    data={contacts.data}\r\n                    columns={contacts.columns}\r\n                    groups={contactStateGroups}\r\n                    showCount={true}\r\n                /> : null\r\n            }\r\n        </div>\r\n    );\r\n};","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Main from './containers/Main';\r\n\r\nfunction App() {\r\n\r\nreturn (\r\n    <div className=\"App\">\r\n      <Main />\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","const base = '/'\r\n\r\nmodule.exports = Object.freeze({\r\n    LOGIN: () => { return base + 'login' },\r\n    REGISTER: () => { return base + 'register' },\r\n    DATA: (param) => { return base + `data/${param}` }\r\n});"],"sourceRoot":""}