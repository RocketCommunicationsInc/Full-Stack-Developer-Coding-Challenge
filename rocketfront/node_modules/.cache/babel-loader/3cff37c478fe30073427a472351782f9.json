{"ast":null,"code":"import { __assign } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addExceptionMechanism, addInstrumentationHandler, getLocationHref, isErrorEvent, isPrimitive, isString, logger } from '@sentry/utils';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n/** Global handlers */\n\nvar GlobalHandlers =\n/** @class */\nfunction () {\n  /** JSDoc */\n  function GlobalHandlers(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = GlobalHandlers.id;\n    /** JSDoc */\n\n    this._onErrorHandlerInstalled = false;\n    /** JSDoc */\n\n    this._onUnhandledRejectionHandlerInstalled = false;\n    this._options = __assign({\n      onerror: true,\n      onunhandledrejection: true\n    }, options);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  GlobalHandlers.prototype.setupOnce = function () {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  };\n  /** JSDoc */\n\n\n  GlobalHandlers.prototype._installGlobalOnErrorHandler = function () {\n    var _this = this;\n\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: function (data) {\n        var error = data.error;\n        var currentHub = getCurrentHub();\n        var hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n\n        var client = currentHub.getClient();\n        var event = isPrimitive(error) ? _this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column) : _this._enhanceEventWithInitialFrame(eventFromUnknownInput(error, undefined, {\n          attachStacktrace: client && client.getOptions().attachStacktrace,\n          rejection: false\n        }), data.url, data.line, data.column);\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror'\n        });\n        currentHub.captureEvent(event, {\n          originalException: error\n        });\n      },\n      type: 'error'\n    });\n    this._onErrorHandlerInstalled = true;\n  };\n  /** JSDoc */\n\n\n  GlobalHandlers.prototype._installGlobalOnUnhandledRejectionHandler = function () {\n    var _this = this;\n\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: function (e) {\n        var error = e; // dig the object of the rejection out of known event types\n\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          } // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n              error = e.detail.reason;\n            }\n        } catch (_oO) {// no-empty\n        }\n\n        var currentHub = getCurrentHub();\n        var hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n\n        var client = currentHub.getClient();\n        var event = isPrimitive(error) ? _this._eventFromRejectionWithPrimitive(error) : eventFromUnknownInput(error, undefined, {\n          attachStacktrace: client && client.getOptions().attachStacktrace,\n          rejection: true\n        });\n        event.level = Severity.Error;\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection'\n        });\n        currentHub.captureEvent(event, {\n          originalException: error\n        });\n        return;\n      },\n      type: 'unhandledrejection'\n    });\n    this._onUnhandledRejectionHandlerInstalled = true;\n  };\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  GlobalHandlers.prototype._eventFromIncompleteOnError = function (msg, url, line, column) {\n    var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i; // If 'message' is ErrorEvent, get real message from inside\n\n    var message = isErrorEvent(msg) ? msg.message : msg;\n    var name;\n\n    if (isString(message)) {\n      var groups = message.match(ERROR_TYPES_RE);\n\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    var event = {\n      exception: {\n        values: [{\n          type: name || 'Error',\n          value: message\n        }]\n      }\n    };\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  };\n  /**\n   * Create an event from a promise rejection where the `reason` is a primitive.\n   *\n   * @param reason: The `reason` property of the promise rejection\n   * @returns An Event object with an appropriate `exception` value\n   */\n\n\n  GlobalHandlers.prototype._eventFromRejectionWithPrimitive = function (reason) {\n    return {\n      exception: {\n        values: [{\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: \"Non-Error promise rejection captured with value: \" + String(reason)\n        }]\n      }\n    };\n  };\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  GlobalHandlers.prototype._enhanceEventWithInitialFrame = function (event, url, line, column) {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n    var colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    var lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    var filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno: colno,\n        filename: filename,\n        function: '?',\n        in_app: true,\n        lineno: lineno\n      });\n    }\n\n    return event;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GlobalHandlers.id = 'GlobalHandlers';\n  return GlobalHandlers;\n}();\n\nexport { GlobalHandlers };","map":{"version":3,"sources":["../../src/integrations/globalhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Primitive, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  private _onErrorHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  private _onUnhandledRejectionHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  }\n\n  /** JSDoc */\n  private _installGlobalOnErrorHandler(): void {\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n        const error = data.error;\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column)\n          : this._enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error, undefined, {\n                attachStacktrace: client && client.getOptions().attachStacktrace,\n                rejection: false,\n              }),\n              data.url,\n              data.line,\n              data.column,\n            );\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n      },\n      type: 'error',\n    });\n\n    this._onErrorHandlerInstalled = true;\n  }\n\n  /** JSDoc */\n  private _installGlobalOnUnhandledRejectionHandler(): void {\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (e: any) => {\n        let error = e;\n\n        // dig the object of the rejection out of known event types\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          }\n          // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n            error = e.detail.reason;\n          }\n        } catch (_oO) {\n          // no-empty\n        }\n\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromRejectionWithPrimitive(error)\n          : eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: true,\n            });\n\n        event.level = Severity.Error;\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n\n        return;\n      },\n      type: 'unhandledrejection',\n    });\n\n    this._onUnhandledRejectionHandlerInstalled = true;\n  }\n\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n    const ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n    // If 'message' is ErrorEvent, get real message from inside\n    let message = isErrorEvent(msg) ? msg.message : msg;\n    let name;\n\n    if (isString(message)) {\n      const groups = message.match(ERROR_TYPES_RE);\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    const event = {\n      exception: {\n        values: [\n          {\n            type: name || 'Error',\n            value: message,\n          },\n        ],\n      },\n    };\n\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  }\n\n  /**\n   * Create an event from a promise rejection where the `reason` is a primitive.\n   *\n   * @param reason: The `reason` property of the promise rejection\n   * @returns An Event object with an appropriate `exception` value\n   */\n  private _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n    return {\n      exception: {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n            value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n          },\n        ],\n      },\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}