{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { captureException, showReportDialog, withScope } from '@sentry/browser';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nexport var UNKNOWN_COMPONENT = 'unknown';\nvar INITIAL_STATE = {\n  componentStack: null,\n  error: null,\n  eventId: null\n};\n/**\n * A ErrorBoundary component that logs errors to Sentry.\n * Requires React >= 16\n */\n\nvar ErrorBoundary =\n/** @class */\nfunction (_super) {\n  __extends(ErrorBoundary, _super);\n\n  function ErrorBoundary() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = INITIAL_STATE;\n\n    _this.resetErrorBoundary = function () {\n      var onReset = _this.props.onReset;\n      var _a = _this.state,\n          error = _a.error,\n          componentStack = _a.componentStack,\n          eventId = _a.eventId;\n\n      if (onReset) {\n        onReset(error, componentStack, eventId);\n      }\n\n      _this.setState(INITIAL_STATE);\n    };\n\n    return _this;\n  }\n\n  ErrorBoundary.prototype.componentDidCatch = function (error, _a) {\n    var _this = this;\n\n    var componentStack = _a.componentStack;\n    var _b = this.props,\n        beforeCapture = _b.beforeCapture,\n        onError = _b.onError,\n        showDialog = _b.showDialog,\n        dialogOptions = _b.dialogOptions;\n    withScope(function (scope) {\n      if (beforeCapture) {\n        beforeCapture(scope, error, componentStack);\n      }\n\n      var eventId = captureException(error, {\n        contexts: {\n          react: {\n            componentStack: componentStack\n          }\n        }\n      });\n\n      if (onError) {\n        onError(error, componentStack, eventId);\n      }\n\n      if (showDialog) {\n        showReportDialog(__assign(__assign({}, dialogOptions), {\n          eventId: eventId\n        }));\n      } // componentDidCatch is used over getDerivedStateFromError\n      // so that componentStack is accessible through state.\n\n\n      _this.setState({\n        error: error,\n        componentStack: componentStack,\n        eventId: eventId\n      });\n    });\n  };\n\n  ErrorBoundary.prototype.componentDidMount = function () {\n    var onMount = this.props.onMount;\n\n    if (onMount) {\n      onMount();\n    }\n  };\n\n  ErrorBoundary.prototype.componentWillUnmount = function () {\n    var _a = this.state,\n        error = _a.error,\n        componentStack = _a.componentStack,\n        eventId = _a.eventId;\n    var onUnmount = this.props.onUnmount;\n\n    if (onUnmount) {\n      onUnmount(error, componentStack, eventId);\n    }\n  };\n\n  ErrorBoundary.prototype.render = function () {\n    var fallback = this.props.fallback;\n    var _a = this.state,\n        error = _a.error,\n        componentStack = _a.componentStack,\n        eventId = _a.eventId;\n\n    if (error) {\n      if (React.isValidElement(fallback)) {\n        return fallback;\n      }\n\n      if (typeof fallback === 'function') {\n        return fallback({\n          error: error,\n          componentStack: componentStack,\n          resetError: this.resetErrorBoundary,\n          eventId: eventId\n        });\n      } // Fail gracefully if no fallback provided\n\n\n      return null;\n    }\n\n    return this.props.children;\n  };\n\n  return ErrorBoundary;\n}(React.Component); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction withErrorBoundary(WrappedComponent, errorBoundaryOptions) {\n  var componentDisplayName = WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  var Wrapped = function (props) {\n    return React.createElement(ErrorBoundary, __assign({}, errorBoundaryOptions), React.createElement(WrappedComponent, __assign({}, props)));\n  };\n\n  Wrapped.displayName = \"errorBoundary(\" + componentDisplayName + \")\"; // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\nexport { ErrorBoundary, withErrorBoundary };","map":{"version":3,"sources":["../src/errorboundary.tsx"],"names":[],"mappings":"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","sourcesContent":["import { captureException, ReportDialogOptions, Scope, showReportDialog, withScope } from '@sentry/browser';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\n\nexport const UNKNOWN_COMPONENT = 'unknown';\n\nexport type FallbackRender = (errorData: {\n  error: Error;\n  componentStack: string | null;\n  eventId: string | null;\n  resetError(): void;\n}) => React.ReactNode;\n\nexport type ErrorBoundaryProps = {\n  /** If a Sentry report dialog should be rendered on error */\n  showDialog?: boolean;\n  /**\n   * Options to be passed into the Sentry report dialog.\n   * No-op if {@link showDialog} is false.\n   */\n  dialogOptions?: ReportDialogOptions;\n  /**\n   * A fallback component that gets rendered when the error boundary encounters an error.\n   *\n   * Can either provide a React Component, or a function that returns React Component as\n   * a valid fallback prop. If a function is provided, the function will be called with\n   * the error, the component stack, and an function that resets the error boundary on error.\n   *\n   */\n  fallback?: React.ReactNode | FallbackRender;\n  /** Called with the error boundary encounters an error */\n  onError?(error: Error, componentStack: string, eventId: string): void;\n  /** Called on componentDidMount() */\n  onMount?(): void;\n  /** Called if resetError() is called from the fallback render props function  */\n  onReset?(error: Error | null, componentStack: string | null, eventId: string | null): void;\n  /** Called on componentWillUnmount() */\n  onUnmount?(error: Error | null, componentStack: string | null, eventId: string | null): void;\n  /** Called before the error is captured by Sentry, allows for you to add tags or context using the scope */\n  beforeCapture?(scope: Scope, error: Error | null, componentStack: string | null): void;\n};\n\ntype ErrorBoundaryState = {\n  componentStack: string | null;\n  error: Error | null;\n  eventId: string | null;\n};\n\nconst INITIAL_STATE = {\n  componentStack: null,\n  error: null,\n  eventId: null,\n};\n\n/**\n * A ErrorBoundary component that logs errors to Sentry.\n * Requires React >= 16\n */\nclass ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  public state: ErrorBoundaryState = INITIAL_STATE;\n\n  public componentDidCatch(error: Error, { componentStack }: React.ErrorInfo): void {\n    const { beforeCapture, onError, showDialog, dialogOptions } = this.props;\n\n    withScope(scope => {\n      if (beforeCapture) {\n        beforeCapture(scope, error, componentStack);\n      }\n      const eventId = captureException(error, { contexts: { react: { componentStack } } });\n      if (onError) {\n        onError(error, componentStack, eventId);\n      }\n      if (showDialog) {\n        showReportDialog({ ...dialogOptions, eventId });\n      }\n\n      // componentDidCatch is used over getDerivedStateFromError\n      // so that componentStack is accessible through state.\n      this.setState({ error, componentStack, eventId });\n    });\n  }\n\n  public componentDidMount(): void {\n    const { onMount } = this.props;\n    if (onMount) {\n      onMount();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { error, componentStack, eventId } = this.state;\n    const { onUnmount } = this.props;\n    if (onUnmount) {\n      onUnmount(error, componentStack, eventId);\n    }\n  }\n\n  public resetErrorBoundary: () => void = () => {\n    const { onReset } = this.props;\n    const { error, componentStack, eventId } = this.state;\n    if (onReset) {\n      onReset(error, componentStack, eventId);\n    }\n    this.setState(INITIAL_STATE);\n  };\n\n  public render(): React.ReactNode {\n    const { fallback } = this.props;\n    const { error, componentStack, eventId } = this.state;\n\n    if (error) {\n      if (React.isValidElement(fallback)) {\n        return fallback;\n      }\n      if (typeof fallback === 'function') {\n        return fallback({ error, componentStack, resetError: this.resetErrorBoundary, eventId }) as FallbackRender;\n      }\n\n      // Fail gracefully if no fallback provided\n      return null;\n    }\n\n    return this.props.children;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary<P extends Record<string, any>>(\n  WrappedComponent: React.ComponentType<P>,\n  errorBoundaryOptions: ErrorBoundaryProps,\n): React.FC<P> {\n  const componentDisplayName = WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  const Wrapped: React.FC<P> = (props: P) => (\n    <ErrorBoundary {...errorBoundaryOptions}>\n      <WrappedComponent {...props} />\n    </ErrorBoundary>\n  );\n\n  Wrapped.displayName = `errorBoundary(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\nexport { ErrorBoundary, withErrorBoundary };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}