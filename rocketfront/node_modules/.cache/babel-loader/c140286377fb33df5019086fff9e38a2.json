{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc'; // TODO: Implement different loggers for different environments\n\nvar global = getGlobalObject();\n/** Prefix for logging strings */\n\nvar PREFIX = 'Sentry Logger ';\n/** JSDoc */\n\nvar Logger =\n/** @class */\nfunction () {\n  /** JSDoc */\n  function Logger() {\n    this._enabled = false;\n  }\n  /** JSDoc */\n\n\n  Logger.prototype.disable = function () {\n    this._enabled = false;\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.enable = function () {\n    this._enabled = true;\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    consoleSandbox(function () {\n      global.console.log(PREFIX + \"[Log]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    consoleSandbox(function () {\n      global.console.warn(PREFIX + \"[Warn]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    consoleSandbox(function () {\n      global.console.error(PREFIX + \"[Error]: \" + args.join(' '));\n    });\n  };\n\n  return Logger;\n}(); // Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\n\n\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nvar logger = global.__SENTRY__.logger || (global.__SENTRY__.logger = new Logger());\nexport { logger };","map":{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":"AAAA;AACA,SAAS,cAAT,EAAyB,eAAzB,QAAgD,QAAhD,C,CAEA;;AACA,IAAM,MAAM,GAAG,eAAe,EAA9B;AAEA;;AACA,IAAM,MAAM,GAAG,gBAAf;AAEA;;AACA,IAAA,MAAA;AAAA;AAAA,YAAA;AAIE;AACA,WAAA,MAAA,GAAA;AACE,SAAK,QAAL,GAAgB,KAAhB;AACD;AAED;;;AACO,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE,SAAK,QAAL,GAAgB,KAAhB;AACD,GAFM;AAIP;;;AACO,EAAA,MAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACE,SAAK,QAAL,GAAgB,IAAhB;AACD,GAFM;AAIP;;;AACO,EAAA,MAAA,CAAA,SAAA,CAAA,GAAA,GAAP,YAAA;AAAW,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACT,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB;AACD;;AACD,IAAA,cAAc,CAAC,YAAA;AACb,MAAA,MAAM,CAAC,OAAP,CAAe,GAAf,CAAsB,MAAM,GAAA,SAAN,GAAgB,IAAI,CAAC,IAAL,CAAU,GAAV,CAAtC;AACD,KAFa,CAAd;AAGD,GAPM;AASP;;;AACO,EAAA,MAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AAAY,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACV,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB;AACD;;AACD,IAAA,cAAc,CAAC,YAAA;AACb,MAAA,MAAM,CAAC,OAAP,CAAe,IAAf,CAAuB,MAAM,GAAA,UAAN,GAAiB,IAAI,CAAC,IAAL,CAAU,GAAV,CAAxC;AACD,KAFa,CAAd;AAGD,GAPM;AASP;;;AACO,EAAA,MAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AAAa,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACX,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB;AACD;;AACD,IAAA,cAAc,CAAC,YAAA;AACb,MAAA,MAAM,CAAC,OAAP,CAAe,KAAf,CAAwB,MAAM,GAAA,WAAN,GAAkB,IAAI,CAAC,IAAL,CAAU,GAAV,CAA1C;AACD,KAFa,CAAd;AAGD,GAPM;;AAQT,SAAA,MAAA;AAAC,CAhDD,EAAA,C,CAkDA;;;AACA,MAAM,CAAC,UAAP,GAAoB,MAAM,CAAC,UAAP,IAAqB,EAAzC;AACA,IAAM,MAAM,GAAI,MAAM,CAAC,UAAP,CAAkB,MAAlB,KAAwC,MAAM,CAAC,UAAP,CAAkB,MAAlB,GAA2B,IAAI,MAAJ,EAAnE,CAAhB;AAEA,SAAS,MAAT","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`);\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}