{"ast":null,"code":"import React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getAlerts } from \"../redux/actions/AlertsActions\";\nimport AlertInfo from \"./AlertInfo\";\nimport { RuxLog } from \"@astrouxds/rux-log/rux-log.js\";\n\nclass AlertDisplay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      alerts: []\n    };\n  }\n\n  componentDidMount(prevProps) {\n    if (this.props !== prevProps) {\n      this.props.getAlerts();\n    }\n  }\n\n  renderLogData() {\n    let myLogData = [];\n    this.props.alerts.alerts.map(alert => {\n      myLogData.push({\n        message: alert.errorMessage // category: alert.errorCategory,\n        // timestamp: alertTime,\n        // status: errorSeverity,\n\n      });\n    });\n  } // renderAlerts() {\n  // \treturn this.props.alerts.alerts.map(this.renderSingleAlert);\n  // }\n  // renderSingleAlert = (alertObj) => {\n  // \treturn (\n  // \t\t<AlertInfo\n  // \t\t\tkey={alertObj.errorId}\n  // \t\t\tid={alertObj.errorId}\n  // \t\t\terrorMessage={alertObj.errorMessage}\n  // \t\t\terrorCategory={alertObj.errorCategory}\n  // \t\t\terrorTime={alertObj.errorTime}\n  // \t\t/>\n  // \t);\n  // };\n\n\n  render() {\n    // return <div id=\"alerts\">{this.renderAlerts()}</div>;\n    return `<rux-log data=\"${this.renderLogData()}\"></rux-log>`;\n  }\n\n}\n\nconst mSTP = state => {\n  return {\n    alerts: state.alerts\n  };\n};\n\nconst mDTP = dispatch => {\n  return {\n    getAlerts: info => dispatch(getAlerts(info))\n  };\n};\n\nexport default connect(mSTP, mDTP)(AlertDisplay);","map":{"version":3,"sources":["/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/src/components/AlertDisplay.js"],"names":["React","Component","Redirect","Link","connect","getAlerts","AlertInfo","RuxLog","AlertDisplay","constructor","props","state","alerts","componentDidMount","prevProps","renderLogData","myLogData","map","alert","push","message","errorMessage","render","mSTP","mDTP","dispatch","info"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,IAAnB,QAA+B,kBAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,MAAT,QAAuB,+BAAvB;;AAEA,MAAMC,YAAN,SAA2BP,SAA3B,CAAqC;AACpCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,MAAM,EAAE;AADI,KAAb;AAGA;;AAEDC,EAAAA,iBAAiB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKJ,KAAL,KAAeI,SAAnB,EAA8B;AAC7B,WAAKJ,KAAL,CAAWL,SAAX;AACA;AACD;;AAEDU,EAAAA,aAAa,GAAG;AACf,QAAIC,SAAS,GAAG,EAAhB;AACA,SAAKN,KAAL,CAAWE,MAAX,CAAkBA,MAAlB,CAAyBK,GAAzB,CAA8BC,KAAD,IAAW;AACvCF,MAAAA,SAAS,CAACG,IAAV,CAAe;AACdC,QAAAA,OAAO,EAAEF,KAAK,CAACG,YADD,CAEd;AACA;AACA;;AAJc,OAAf;AAMA,KAPD;AAQA,GAxBmC,CAyBpC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACR;AACA,WAAQ,kBAAiB,KAAKP,aAAL,EAAqB,cAA9C;AACA;;AA5CmC;;AA+CrC,MAAMQ,IAAI,GAAIZ,KAAD,IAAW;AACvB,SAAO;AACNC,IAAAA,MAAM,EAAED,KAAK,CAACC;AADR,GAAP;AAGA,CAJD;;AAMA,MAAMY,IAAI,GAAIC,QAAD,IAAc;AAC1B,SAAO;AACNpB,IAAAA,SAAS,EAAGqB,IAAD,IAAUD,QAAQ,CAACpB,SAAS,CAACqB,IAAD,CAAV;AADvB,GAAP;AAGA,CAJD;;AAMA,eAAetB,OAAO,CAACmB,IAAD,EAAOC,IAAP,CAAP,CAAoBhB,YAApB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getAlerts } from \"../redux/actions/AlertsActions\";\nimport AlertInfo from \"./AlertInfo\";\nimport { RuxLog } from \"@astrouxds/rux-log/rux-log.js\";\n\nclass AlertDisplay extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\talerts: [],\n\t\t};\n\t}\n\n\tcomponentDidMount(prevProps) {\n\t\tif (this.props !== prevProps) {\n\t\t\tthis.props.getAlerts();\n\t\t}\n\t}\n\n\trenderLogData() {\n\t\tlet myLogData = [];\n\t\tthis.props.alerts.alerts.map((alert) => {\n\t\t\tmyLogData.push({\n\t\t\t\tmessage: alert.errorMessage,\n\t\t\t\t// category: alert.errorCategory,\n\t\t\t\t// timestamp: alertTime,\n\t\t\t\t// status: errorSeverity,\n\t\t\t});\n\t\t});\n\t}\n\t// renderAlerts() {\n\t// \treturn this.props.alerts.alerts.map(this.renderSingleAlert);\n\t// }\n\n\t// renderSingleAlert = (alertObj) => {\n\t// \treturn (\n\t// \t\t<AlertInfo\n\t// \t\t\tkey={alertObj.errorId}\n\t// \t\t\tid={alertObj.errorId}\n\t// \t\t\terrorMessage={alertObj.errorMessage}\n\t// \t\t\terrorCategory={alertObj.errorCategory}\n\t// \t\t\terrorTime={alertObj.errorTime}\n\t// \t\t/>\n\t// \t);\n\t// };\n\n\trender() {\n\t\t// return <div id=\"alerts\">{this.renderAlerts()}</div>;\n\t\treturn `<rux-log data=\"${this.renderLogData()}\"></rux-log>`;\n\t}\n}\n\nconst mSTP = (state) => {\n\treturn {\n\t\talerts: state.alerts,\n\t};\n};\n\nconst mDTP = (dispatch) => {\n\treturn {\n\t\tgetAlerts: (info) => dispatch(getAlerts(info)),\n\t};\n};\n\nexport default connect(mSTP, mDTP)(AlertDisplay);\n"]},"metadata":{},"sourceType":"module"}