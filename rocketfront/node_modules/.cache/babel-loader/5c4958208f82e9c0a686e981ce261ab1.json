{"ast":null,"code":"import { LitElement, html } from 'lit-element';\nimport { directive } from 'lit-html';\nconst getIcon = directive((library, icon) => part => {\n  try {\n    part.setValue(`${library}#${icon}`);\n  } catch (error) {\n    throw error;\n  }\n});\nexport class RuxIcon extends LitElement {\n  static get properties() {\n    return {\n      icon: {\n        type: String\n      },\n      size: {\n        type: String\n      },\n      color: {\n        type: String\n      },\n      library: {\n        type: String\n      },\n      label: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.library = '/icons/astro.svg';\n    /* TODO: a non-presumptive way to assign a better default label if the user doesn’t provide one */\n\n    this.label = 'icon';\n  }\n\n  firstUpdated() {\n    this.style.setProperty('--iconColor', this.color);\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.get('color')) {\n      this.style.setProperty('--iconColor', this.color);\n    }\n  }\n\n  render() {\n    return html`\n      <style>\n        :host {\n          --iconDefaultSize: 2.7rem;\n          --iconColor: var(--iconDefaultColor);\n\n          display: inline-block;\n\n          height: var(--iconDefaultSize);\n          width: var(--iconDefaultSize);\n        }\n\n        svg,\n        svg > use {\n          height: 100%;\n\t\t\t\t\twidth: auto;\n\t\t\t\t\tfill: var(--iconColor);\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t.rux-button--outline rux-icon {\n\n\t\t\t\t}\n\n        :host([size='extra-small']) {\n          height: 1rem;\n          width: 1rem;\n        }\n\n        :host([size='small']) {\n          height: 2rem;\n          width: 2rem;\n        }\n\n        :host([size='large']) {\n          height: 4rem;\n          width: 4rem;\n        }\n      </style>\n\n      <span id=\"rux-icon\" title=\"${this.label}\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 128 128\"\n          preserveAspectRatio=\"xMidYMid meet\"\n          focusable=\"false\"\n        >\n          <use href=\"${getIcon(this.library, this.icon)}\"></use>\n        </svg>\n      </span>\n    `;\n  }\n\n}\ncustomElements.define('rux-icon', RuxIcon);","map":{"version":3,"sources":["/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/src/components/components/rux-icon/rux-icon.js"],"names":["LitElement","html","directive","getIcon","library","icon","part","setValue","error","RuxIcon","properties","type","String","size","color","label","constructor","firstUpdated","style","setProperty","updated","changedProperties","get","render","customElements","define"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,QAAiC,aAAjC;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,MAAMC,OAAO,GAAGD,SAAS,CAAC,CAACE,OAAD,EAAUC,IAAV,KAAoBC,IAAD,IAAU;AACrD,MAAI;AACFA,IAAAA,IAAI,CAACC,QAAL,CAAe,GAAEH,OAAQ,IAAGC,IAAK,EAAjC;AACD,GAFD,CAEE,OAAOG,KAAP,EAAc;AACd,UAAMA,KAAN;AACD;AACF,CANwB,CAAzB;AAQA,OAAO,MAAMC,OAAN,SAAsBT,UAAtB,CAAiC;AACjB,aAAVU,UAAU,GAAG;AACtB,WAAO;AACLL,MAAAA,IAAI,EAAE;AACJM,QAAAA,IAAI,EAAEC;AADF,OADD;AAILC,MAAAA,IAAI,EAAE;AACJF,QAAAA,IAAI,EAAEC;AADF,OAJD;AAOLE,MAAAA,KAAK,EAAE;AACLH,QAAAA,IAAI,EAAEC;AADD,OAPF;AAULR,MAAAA,OAAO,EAAE;AACPO,QAAAA,IAAI,EAAEC;AADC,OAVJ;AAaLG,MAAAA,KAAK,EAAE;AACLJ,QAAAA,IAAI,EAAEC;AADD;AAbF,KAAP;AAiBD;;AAEDI,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKZ,OAAL,GAAe,kBAAf;AACA;;AACA,SAAKW,KAAL,GAAa,MAAb;AACD;;AAEDE,EAAAA,YAAY,GAAG;AACb,SAAKC,KAAL,CAAWC,WAAX,CAAuB,aAAvB,EAAsC,KAAKL,KAA3C;AACD;;AAEDM,EAAAA,OAAO,CAACC,iBAAD,EAAoB;AACzB,QAAIA,iBAAiB,CAACC,GAAlB,CAAsB,OAAtB,CAAJ,EAAoC;AAClC,WAAKJ,KAAL,CAAWC,WAAX,CAAuB,aAAvB,EAAsC,KAAKL,KAA3C;AACD;AACF;;AAEDS,EAAAA,MAAM,GAAG;AACP,WAAOtB,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAKc,KAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuBZ,OAAO,CAAC,KAAKC,OAAN,EAAe,KAAKC,IAApB,CAA0B;AACxD;AACA;AACA,KAlDI;AAmDD;;AA3FqC;AA6FxCmB,cAAc,CAACC,MAAf,CAAsB,UAAtB,EAAkChB,OAAlC","sourcesContent":["import { LitElement, html } from 'lit-element';\nimport { directive } from 'lit-html';\n\nconst getIcon = directive((library, icon) => (part) => {\n  try {\n    part.setValue(`${library}#${icon}`);\n  } catch (error) {\n    throw error;\n  }\n});\n\nexport class RuxIcon extends LitElement {\n  static get properties() {\n    return {\n      icon: {\n        type: String,\n      },\n      size: {\n        type: String,\n      },\n      color: {\n        type: String,\n      },\n      library: {\n        type: String,\n      },\n      label: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.library = '/icons/astro.svg';\n    /* TODO: a non-presumptive way to assign a better default label if the user doesn’t provide one */\n    this.label = 'icon';\n  }\n\n  firstUpdated() {\n    this.style.setProperty('--iconColor', this.color);\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.get('color')) {\n      this.style.setProperty('--iconColor', this.color);\n    }\n  }\n\n  render() {\n    return html`\n      <style>\n        :host {\n          --iconDefaultSize: 2.7rem;\n          --iconColor: var(--iconDefaultColor);\n\n          display: inline-block;\n\n          height: var(--iconDefaultSize);\n          width: var(--iconDefaultSize);\n        }\n\n        svg,\n        svg > use {\n          height: 100%;\n\t\t\t\t\twidth: auto;\n\t\t\t\t\tfill: var(--iconColor);\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t.rux-button--outline rux-icon {\n\n\t\t\t\t}\n\n        :host([size='extra-small']) {\n          height: 1rem;\n          width: 1rem;\n        }\n\n        :host([size='small']) {\n          height: 2rem;\n          width: 2rem;\n        }\n\n        :host([size='large']) {\n          height: 4rem;\n          width: 4rem;\n        }\n      </style>\n\n      <span id=\"rux-icon\" title=\"${this.label}\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 128 128\"\n          preserveAspectRatio=\"xMidYMid meet\"\n          focusable=\"false\"\n        >\n          <use href=\"${getIcon(this.library, this.icon)}\"></use>\n        </svg>\n      </span>\n    `;\n  }\n}\ncustomElements.define('rux-icon', RuxIcon);\n"]},"metadata":{},"sourceType":"module"}