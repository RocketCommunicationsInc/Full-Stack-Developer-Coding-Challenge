{"ast":null,"code":"import { Dsn, urlEncode } from '@sentry/utils';\nvar SENTRY_API_VERSION = '7';\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n **/\n\nvar API =\n/** @class */\nfunction () {\n  /** Create a new instance of API */\n  function API(dsn, metadata) {\n    if (metadata === void 0) {\n      metadata = {};\n    }\n\n    this.dsn = dsn;\n    this._dsnObject = new Dsn(dsn);\n    this.metadata = metadata;\n  }\n  /** Returns the Dsn object. */\n\n\n  API.prototype.getDsn = function () {\n    return this._dsnObject;\n  };\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n\n\n  API.prototype.getBaseApiEndpoint = function () {\n    var dsn = this._dsnObject;\n    var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n    var port = dsn.port ? \":\" + dsn.port : '';\n    return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n  };\n  /** Returns the store endpoint URL. */\n\n\n  API.prototype.getStoreEndpoint = function () {\n    return this._getIngestEndpoint('store');\n  };\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n\n\n  API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n    return this.getStoreEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n\n\n  API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n    return this._getEnvelopeEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /** Returns only the path component for the store endpoint. */\n\n\n  API.prototype.getStoreEndpointPath = function () {\n    var dsn = this._dsnObject;\n    return (dsn.path ? \"/\" + dsn.path : '') + \"/api/\" + dsn.projectId + \"/store/\";\n  };\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n\n\n  API.prototype.getRequestHeaders = function (clientName, clientVersion) {\n    // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n    var dsn = this._dsnObject;\n    var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n    header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n    header.push(\"sentry_key=\" + dsn.publicKey);\n\n    if (dsn.pass) {\n      header.push(\"sentry_secret=\" + dsn.pass);\n    }\n\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', ')\n    };\n  };\n  /** Returns the url to the report dialog endpoint. */\n\n\n  API.prototype.getReportDialogEndpoint = function (dialogOptions) {\n    if (dialogOptions === void 0) {\n      dialogOptions = {};\n    }\n\n    var dsn = this._dsnObject;\n    var endpoint = this.getBaseApiEndpoint() + \"embed/error-page/\";\n    var encodedOptions = [];\n    encodedOptions.push(\"dsn=\" + dsn.toString());\n\n    for (var key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n\n        if (dialogOptions.user.name) {\n          encodedOptions.push(\"name=\" + encodeURIComponent(dialogOptions.user.name));\n        }\n\n        if (dialogOptions.user.email) {\n          encodedOptions.push(\"email=\" + encodeURIComponent(dialogOptions.user.email));\n        }\n      } else {\n        encodedOptions.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]));\n      }\n    }\n\n    if (encodedOptions.length) {\n      return endpoint + \"?\" + encodedOptions.join('&');\n    }\n\n    return endpoint;\n  };\n  /** Returns the envelope endpoint URL. */\n\n\n  API.prototype._getEnvelopeEndpoint = function () {\n    return this._getIngestEndpoint('envelope');\n  };\n  /** Returns the ingest API endpoint for target. */\n\n\n  API.prototype._getIngestEndpoint = function (target) {\n    var base = this.getBaseApiEndpoint();\n    var dsn = this._dsnObject;\n    return \"\" + base + dsn.projectId + \"/\" + target + \"/\";\n  };\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n\n\n  API.prototype._encodedAuth = function () {\n    var dsn = this._dsnObject;\n    var auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.publicKey,\n      sentry_version: SENTRY_API_VERSION\n    };\n    return urlEncode(auth);\n  };\n\n  return API;\n}();\n\nexport { API };","map":{"version":3,"sources":["../src/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { DsnLike, SdkMetadata } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n **/\nexport class API {\n  /** The DSN as passed to Sentry.init() */\n  public dsn: DsnLike;\n\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  public metadata: SdkMetadata;\n\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n\n  /** Create a new instance of API */\n  public constructor(dsn: DsnLike, metadata: SdkMetadata = {}) {\n    this.dsn = dsn;\n    this._dsnObject = new Dsn(dsn);\n    this.metadata = metadata;\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return this._getIngestEndpoint('store');\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return `${this.getStoreEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return `${this._getEnvelopeEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.publicKey}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this.getBaseApiEndpoint()}embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n\n  /** Returns the envelope endpoint URL. */\n  private _getEnvelopeEndpoint(): string {\n    return this._getIngestEndpoint('envelope');\n  }\n\n  /** Returns the ingest API endpoint for target. */\n  private _getIngestEndpoint(target: 'store' | 'envelope'): string {\n    const base = this.getBaseApiEndpoint();\n    const dsn = this._dsnObject;\n    return `${base}${dsn.projectId}/${target}/`;\n  }\n\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  private _encodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.publicKey,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    return urlEncode(auth);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}