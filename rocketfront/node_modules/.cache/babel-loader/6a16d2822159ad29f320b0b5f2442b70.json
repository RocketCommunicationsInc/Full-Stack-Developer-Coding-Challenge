{"ast":null,"code":"import { getGlobalObject } from './misc';\nimport { dynamicRequire, isNodeEnv } from './node';\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\n\nvar dateTimestampSource = {\n  nowSeconds: function () {\n    return Date.now() / 1000;\n  }\n};\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\n\nfunction getBrowserPerformance() {\n  var performance = getGlobalObject().performance;\n\n  if (!performance || !performance.now) {\n    return undefined;\n  } // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n\n\n  var timeOrigin = Date.now() - performance.now();\n  return {\n    now: function () {\n      return performance.now();\n    },\n    timeOrigin: timeOrigin\n  };\n}\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\n\n\nfunction getNodePerformance() {\n  try {\n    var perfHooks = dynamicRequire(module, 'perf_hooks');\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n/**\n * The Performance API implementation for the current platform, if available.\n */\n\n\nvar platformPerformance = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\nvar timestampSource = platformPerformance === undefined ? dateTimestampSource : {\n  nowSeconds: function () {\n    return (platformPerformance.timeOrigin + platformPerformance.now()) / 1000;\n  }\n};\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\n\nexport var dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\n\nexport var timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource); // Re-exported with an old name for backwards-compatibility.\n\nexport var timestampWithMs = timestampInSeconds;\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\n\nexport var usingPerformanceAPI = platformPerformance !== undefined;\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\n\nexport var _browserPerformanceTimeOriginMode;\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\n\nexport var browserPerformanceTimeOrigin = function () {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n  var performance = getGlobalObject().performance;\n\n  if (!performance) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  var threshold = 3600 * 1000;\n  var timeOriginIsReliable = performance.timeOrigin && Math.abs(performance.timeOrigin + performance.now() - Date.now()) < threshold;\n\n  if (timeOriginIsReliable) {\n    _browserPerformanceTimeOriginMode = 'timeOrigin';\n    return performance.timeOrigin;\n  } // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n\n\n  var navigationStart = performance.timing && performance.timing.navigationStart;\n  var hasNavigationStart = typeof navigationStart === 'number';\n  var navigationStartIsReliable = hasNavigationStart && Math.abs(navigationStart + performance.now() - Date.now()) < threshold;\n\n  if (navigationStartIsReliable) {\n    _browserPerformanceTimeOriginMode = 'navigationStart';\n    return navigationStart;\n  } // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n\n\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return Date.now();\n}();","map":{"version":3,"sources":["../src/time.ts"],"names":[],"mappings":"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","sourcesContent":["import { getGlobalObject } from './misc';\nimport { dynamicRequire, isNodeEnv } from './node';\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);\n\n// Re-exported with an old name for backwards-compatibility.\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = getGlobalObject<Window>();\n  if (!performance) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n\n  const timeOriginIsReliable =\n    performance.timeOrigin && Math.abs(performance.timeOrigin + performance.now() - Date.now()) < threshold;\n  if (timeOriginIsReliable) {\n    _browserPerformanceTimeOriginMode = 'timeOrigin';\n    return performance.timeOrigin;\n  }\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  const navigationStartIsReliable =\n    hasNavigationStart && Math.abs(navigationStart + performance.now() - Date.now()) < threshold;\n  if (navigationStartIsReliable) {\n    _browserPerformanceTimeOriginMode = 'navigationStart';\n    return navigationStart;\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return Date.now();\n})();\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}