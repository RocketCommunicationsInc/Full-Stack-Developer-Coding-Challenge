{"ast":null,"code":"var _jsxFileName = \"/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/src/components/AlertDisplay.js\";\nimport React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getAlerts } from \"../redux/actions/AlertsActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AlertDisplay extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderSingleAlert = alertObj => {\n      return /*#__PURE__*/_jsxDEV(AlertInfo, {\n        id: alertObj.errorId,\n        errorMessage: alertObj.errorMessage,\n        errorCategory: alertObj.errorCategory,\n        errorTime: alertObj.errorTime\n      }, alertObj.errorId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 4\n      }, this);\n    };\n  }\n\n  componentDidMount(prevProps) {\n    if (this.props !== prevProps) {\n      this.props.getAlerts();\n    }\n  }\n\n  renderAlerts() {\n    return this.props.alerts.map(this.renderSingleAlert);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"alerts\",\n      children: this.renderAlerts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nconst mSTP = state => {\n  return {\n    alerts: state.alerts\n  };\n};\n\nconst mDTP = dispatch => {\n  return {\n    getAlerts: info => dispatch(getAlerts(info))\n  };\n};\n\nexport default connect(mSTP, mDTP)(AlertDisplay);","map":{"version":3,"sources":["/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/src/components/AlertDisplay.js"],"names":["React","Component","Redirect","Link","connect","getAlerts","AlertDisplay","constructor","props","renderSingleAlert","alertObj","errorId","errorMessage","errorCategory","errorTime","componentDidMount","prevProps","renderAlerts","alerts","map","render","mSTP","state","mDTP","dispatch","info"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,IAAnB,QAA+B,kBAA/B;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,gCAA1B;;;AAEA,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AACpCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAcnBC,iBAdmB,GAcEC,QAAD,IAAc;AACjC,0BACC,QAAC,SAAD;AAEC,QAAA,EAAE,EAAEA,QAAQ,CAACC,OAFd;AAGC,QAAA,YAAY,EAAED,QAAQ,CAACE,YAHxB;AAIC,QAAA,aAAa,EAAEF,QAAQ,CAACG,aAJzB;AAKC,QAAA,SAAS,EAAEH,QAAQ,CAACI;AALrB,SACMJ,QAAQ,CAACC,OADf;AAAA;AAAA;AAAA;AAAA,cADD;AASA,KAxBkB;AAElB;;AAEDI,EAAAA,iBAAiB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKR,KAAL,KAAeQ,SAAnB,EAA8B;AAC7B,WAAKR,KAAL,CAAWH,SAAX;AACA;AACD;;AAEDY,EAAAA,YAAY,GAAG;AACd,WAAO,KAAKT,KAAL,CAAWU,MAAX,CAAkBC,GAAlB,CAAsB,KAAKV,iBAA3B,CAAP;AACA;;AAcDW,EAAAA,MAAM,GAAG;AACR,wBAAO;AAAK,MAAA,EAAE,EAAC,QAAR;AAAA,gBAAkB,KAAKH;AAAvB;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AA7BmC;;AAgCrC,MAAMI,IAAI,GAAIC,KAAD,IAAW;AACvB,SAAO;AACNJ,IAAAA,MAAM,EAAEI,KAAK,CAACJ;AADR,GAAP;AAGA,CAJD;;AAMA,MAAMK,IAAI,GAAIC,QAAD,IAAc;AAC1B,SAAO;AACNnB,IAAAA,SAAS,EAAGoB,IAAD,IAAUD,QAAQ,CAACnB,SAAS,CAACoB,IAAD,CAAV;AADvB,GAAP;AAGA,CAJD;;AAMA,eAAerB,OAAO,CAACiB,IAAD,EAAOE,IAAP,CAAP,CAAoBjB,YAApB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\nimport { getAlerts } from \"../redux/actions/AlertsActions\";\n\nclass AlertDisplay extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\tcomponentDidMount(prevProps) {\n\t\tif (this.props !== prevProps) {\n\t\t\tthis.props.getAlerts();\n\t\t}\n\t}\n\n\trenderAlerts() {\n\t\treturn this.props.alerts.map(this.renderSingleAlert);\n\t}\n\n\trenderSingleAlert = (alertObj) => {\n\t\treturn (\n\t\t\t<AlertInfo\n\t\t\t\tkey={alertObj.errorId}\n\t\t\t\tid={alertObj.errorId}\n\t\t\t\terrorMessage={alertObj.errorMessage}\n\t\t\t\terrorCategory={alertObj.errorCategory}\n\t\t\t\terrorTime={alertObj.errorTime}\n\t\t\t/>\n\t\t);\n\t};\n\n\trender() {\n\t\treturn <div id=\"alerts\">{this.renderAlerts}</div>;\n\t}\n}\n\nconst mSTP = (state) => {\n\treturn {\n\t\talerts: state.alerts,\n\t};\n};\n\nconst mDTP = (dispatch) => {\n\treturn {\n\t\tgetAlerts: (info) => dispatch(getAlerts(info)),\n\t};\n};\n\nexport default connect(mSTP, mDTP)(AlertDisplay);\n"]},"metadata":{},"sourceType":"module"}