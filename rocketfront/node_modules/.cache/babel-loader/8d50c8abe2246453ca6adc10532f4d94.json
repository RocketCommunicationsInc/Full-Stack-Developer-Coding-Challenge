{"ast":null,"code":"import { getGlobalObject } from '@sentry/utils';\nvar global = getGlobalObject();\n/**\n * Creates routing instrumentation for React Router v3\n * Works for React Router >= 3.2.0 and < 4.0.0\n *\n * @param history object from the `history` library\n * @param routes a list of all routes, should be\n * @param match `Router.match` utility\n */\n\nexport function reactRouterV3Instrumentation(history, routes, match) {\n  return function (startTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {\n    if (startTransactionOnPageLoad === void 0) {\n      startTransactionOnPageLoad = true;\n    }\n\n    if (startTransactionOnLocationChange === void 0) {\n      startTransactionOnLocationChange = true;\n    }\n\n    var activeTransaction;\n    var prevName; // Have to use global.location because history.location might not be defined.\n\n    if (startTransactionOnPageLoad && global && global.location) {\n      normalizeTransactionName(routes, global.location, match, function (localName) {\n        prevName = localName;\n        activeTransaction = startTransaction({\n          name: prevName,\n          op: 'pageload',\n          tags: {\n            'routing.instrumentation': 'react-router-v3'\n          }\n        });\n      });\n    }\n\n    if (startTransactionOnLocationChange && history.listen) {\n      history.listen(function (location) {\n        if (location.action === 'PUSH' || location.action === 'POP') {\n          if (activeTransaction) {\n            activeTransaction.finish();\n          }\n\n          var tags_1 = {\n            'routing.instrumentation': 'react-router-v3'\n          };\n\n          if (prevName) {\n            tags_1.from = prevName;\n          }\n\n          normalizeTransactionName(routes, location, match, function (localName) {\n            prevName = localName;\n            activeTransaction = startTransaction({\n              name: prevName,\n              op: 'navigation',\n              tags: tags_1\n            });\n          });\n        }\n      });\n    }\n  };\n}\n/**\n * Normalize transaction names using `Router.match`\n */\n\nfunction normalizeTransactionName(appRoutes, location, match, callback) {\n  var name = location.pathname;\n  match({\n    location: location,\n    routes: appRoutes\n  }, function (error, _redirectLocation, renderProps) {\n    if (error || !renderProps) {\n      return callback(name);\n    }\n\n    var routePath = getRouteStringFromRoutes(renderProps.routes || []);\n\n    if (routePath.length === 0 || routePath === '/*') {\n      return callback(name);\n    }\n\n    name = routePath;\n    return callback(name);\n  });\n}\n/**\n * Generate route name from array of routes\n */\n\n\nfunction getRouteStringFromRoutes(routes) {\n  if (!Array.isArray(routes) || routes.length === 0) {\n    return '';\n  }\n\n  var routesWithPaths = routes.filter(function (route) {\n    return !!route.path;\n  });\n  var index = -1;\n\n  for (var x = routesWithPaths.length - 1; x >= 0; x--) {\n    var route = routesWithPaths[x];\n\n    if (route.path && route.path.startsWith('/')) {\n      index = x;\n      break;\n    }\n  }\n\n  return routesWithPaths.slice(index).filter(function (_a) {\n    var path = _a.path;\n    return !!path;\n  }).map(function (_a) {\n    var path = _a.path;\n    return path;\n  }).join('');\n}","map":{"version":3,"sources":["../src/reactrouterv3.ts"],"names":[],"mappings":"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","sourcesContent":["import { Primitive, Transaction, TransactionContext } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { Location, ReactRouterInstrumentation } from './types';\n\n// Many of the types below had to be mocked out to prevent typescript issues\n// these types are required for correct functionality.\n\ntype HistoryV3 = {\n  location?: Location;\n  listen?(cb: (location: Location) => void): void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n} & Record<string, any>;\n\nexport type Route = { path?: string; childRoutes?: Route[] };\n\nexport type Match = (\n  props: { location: Location; routes: Route[] },\n  cb: (error?: Error, _redirectLocation?: Location, renderProps?: { routes?: Route[] }) => void,\n) => void;\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Creates routing instrumentation for React Router v3\n * Works for React Router >= 3.2.0 and < 4.0.0\n *\n * @param history object from the `history` library\n * @param routes a list of all routes, should be\n * @param match `Router.match` utility\n */\nexport function reactRouterV3Instrumentation(\n  history: HistoryV3,\n  routes: Route[],\n  match: Match,\n): ReactRouterInstrumentation {\n  return (\n    startTransaction: (context: TransactionContext) => Transaction | undefined,\n    startTransactionOnPageLoad: boolean = true,\n    startTransactionOnLocationChange: boolean = true,\n  ) => {\n    let activeTransaction: Transaction | undefined;\n    let prevName: string | undefined;\n\n    // Have to use global.location because history.location might not be defined.\n    if (startTransactionOnPageLoad && global && global.location) {\n      normalizeTransactionName(routes, (global.location as unknown) as Location, match, (localName: string) => {\n        prevName = localName;\n        activeTransaction = startTransaction({\n          name: prevName,\n          op: 'pageload',\n          tags: {\n            'routing.instrumentation': 'react-router-v3',\n          },\n        });\n      });\n    }\n\n    if (startTransactionOnLocationChange && history.listen) {\n      history.listen(location => {\n        if (location.action === 'PUSH' || location.action === 'POP') {\n          if (activeTransaction) {\n            activeTransaction.finish();\n          }\n          const tags: Record<string, Primitive> = {\n            'routing.instrumentation': 'react-router-v3',\n          };\n          if (prevName) {\n            tags.from = prevName;\n          }\n          normalizeTransactionName(routes, location, match, (localName: string) => {\n            prevName = localName;\n            activeTransaction = startTransaction({\n              name: prevName,\n              op: 'navigation',\n              tags,\n            });\n          });\n        }\n      });\n    }\n  };\n}\n\n/**\n * Normalize transaction names using `Router.match`\n */\nfunction normalizeTransactionName(\n  appRoutes: Route[],\n  location: Location,\n  match: Match,\n  callback: (pathname: string) => void,\n): void {\n  let name = location.pathname;\n  match(\n    {\n      location,\n      routes: appRoutes,\n    },\n    (error, _redirectLocation, renderProps) => {\n      if (error || !renderProps) {\n        return callback(name);\n      }\n\n      const routePath = getRouteStringFromRoutes(renderProps.routes || []);\n      if (routePath.length === 0 || routePath === '/*') {\n        return callback(name);\n      }\n\n      name = routePath;\n      return callback(name);\n    },\n  );\n}\n\n/**\n * Generate route name from array of routes\n */\nfunction getRouteStringFromRoutes(routes: Route[]): string {\n  if (!Array.isArray(routes) || routes.length === 0) {\n    return '';\n  }\n\n  const routesWithPaths: Route[] = routes.filter((route: Route) => !!route.path);\n\n  let index = -1;\n  for (let x = routesWithPaths.length - 1; x >= 0; x--) {\n    const route = routesWithPaths[x];\n    if (route.path && route.path.startsWith('/')) {\n      index = x;\n      break;\n    }\n  }\n\n  return routesWithPaths\n    .slice(index)\n    .filter(({ path }) => !!path)\n    .map(({ path }) => path)\n    .join('');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}