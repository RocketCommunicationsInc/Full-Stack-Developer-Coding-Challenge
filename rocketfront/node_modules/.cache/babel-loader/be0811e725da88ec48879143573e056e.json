{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\n\nvar Scope =\n/** @class */\nfunction () {\n  function Scope() {\n    /** Flag if notifiying is happening. */\n    this._notifyingListeners = false;\n    /** Callback for client to receive scope changes. */\n\n    this._scopeListeners = [];\n    /** Callback list that will be called after {@link applyToEvent}. */\n\n    this._eventProcessors = [];\n    /** Array of breadcrumbs. */\n\n    this._breadcrumbs = [];\n    /** User */\n\n    this._user = {};\n    /** Tags */\n\n    this._tags = {};\n    /** Extra */\n\n    this._extra = {};\n    /** Contexts */\n\n    this._contexts = {};\n  }\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n\n\n  Scope.clone = function (scope) {\n    var newScope = new Scope();\n\n    if (scope) {\n      newScope._breadcrumbs = __spread(scope._breadcrumbs);\n      newScope._tags = __assign({}, scope._tags);\n      newScope._extra = __assign({}, scope._extra);\n      newScope._contexts = __assign({}, scope._contexts);\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = __spread(scope._eventProcessors);\n    }\n\n    return newScope;\n  };\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n\n\n  Scope.prototype.addScopeListener = function (callback) {\n    this._scopeListeners.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.addEventProcessor = function (callback) {\n    this._eventProcessors.push(callback);\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setUser = function (user) {\n    this._user = user || {};\n\n    if (this._session) {\n      this._session.update({\n        user: user\n      });\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getUser = function () {\n    return this._user;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTags = function (tags) {\n    this._tags = __assign(__assign({}, this._tags), tags);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTag = function (key, value) {\n    var _a;\n\n    this._tags = __assign(__assign({}, this._tags), (_a = {}, _a[key] = value, _a));\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setExtras = function (extras) {\n    this._extra = __assign(__assign({}, this._extra), extras);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setExtra = function (key, extra) {\n    var _a;\n\n    this._extra = __assign(__assign({}, this._extra), (_a = {}, _a[key] = extra, _a));\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setFingerprint = function (fingerprint) {\n    this._fingerprint = fingerprint;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setLevel = function (level) {\n    this._level = level;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTransactionName = function (name) {\n    this._transactionName = name;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n\n\n  Scope.prototype.setTransaction = function (name) {\n    return this.setTransactionName(name);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setContext = function (key, context) {\n    var _a;\n\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = __assign(__assign({}, this._contexts), (_a = {}, _a[key] = context, _a));\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setSpan = function (span) {\n    this._span = span;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getSpan = function () {\n    return this._span;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getTransaction = function () {\n    var _a, _b, _c, _d; // often, this span will be a transaction, but it's not guaranteed to be\n\n\n    var span = this.getSpan(); // try it the new way first\n\n    if ((_a = span) === null || _a === void 0 ? void 0 : _a.transaction) {\n      return (_b = span) === null || _b === void 0 ? void 0 : _b.transaction;\n    } // fallback to the old way (known bug: this only finds transactions with sampled = true)\n\n\n    if ((_d = (_c = span) === null || _c === void 0 ? void 0 : _c.spanRecorder) === null || _d === void 0 ? void 0 : _d.spans[0]) {\n      return span.spanRecorder.spans[0];\n    } // neither way found a transaction\n\n\n    return undefined;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setSession = function (session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getSession = function () {\n    return this._session;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.update = function (captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      var updatedScope = captureContext(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = __assign(__assign({}, this._tags), captureContext._tags);\n      this._extra = __assign(__assign({}, this._extra), captureContext._extra);\n      this._contexts = __assign(__assign({}, this._contexts), captureContext._contexts);\n\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext;\n      this._tags = __assign(__assign({}, this._tags), captureContext.tags);\n      this._extra = __assign(__assign({}, this._extra), captureContext.extra);\n      this._contexts = __assign(__assign({}, this._contexts), captureContext.contexts);\n\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.clear = function () {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._session = undefined;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {\n    var mergedBreadcrumb = __assign({\n      timestamp: dateTimestampInSeconds()\n    }, breadcrumb);\n\n    this._breadcrumbs = maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0 ? __spread(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxBreadcrumbs) : __spread(this._breadcrumbs, [mergedBreadcrumb]);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.clearBreadcrumbs = function () {\n    this._breadcrumbs = [];\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n\n\n  Scope.prototype.applyToEvent = function (event, hint) {\n    var _a;\n\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = __assign(__assign({}, this._extra), event.extra);\n    }\n\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = __assign(__assign({}, this._tags), event.tags);\n    }\n\n    if (this._user && Object.keys(this._user).length) {\n      event.user = __assign(__assign({}, this._user), event.user);\n    }\n\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = __assign(__assign({}, this._contexts), event.contexts);\n    }\n\n    if (this._level) {\n      event.level = this._level;\n    }\n\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    } // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n\n\n    if (this._span) {\n      event.contexts = __assign({\n        trace: this._span.getTraceContext()\n      }, event.contexts);\n      var transactionName = (_a = this._span.transaction) === null || _a === void 0 ? void 0 : _a.name;\n\n      if (transactionName) {\n        event.tags = __assign({\n          transaction: transactionName\n        }, event.tags);\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = __spread(event.breadcrumbs || [], this._breadcrumbs);\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n    return this._notifyEventProcessors(__spread(getGlobalEventProcessors(), this._eventProcessors), event, hint);\n  };\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n\n\n  Scope.prototype._notifyEventProcessors = function (processors, event, hint, index) {\n    var _this = this;\n\n    if (index === void 0) {\n      index = 0;\n    }\n\n    return new SyncPromise(function (resolve, reject) {\n      var processor = processors[index];\n\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        var result = processor(__assign({}, event), hint);\n\n        if (isThenable(result)) {\n          result.then(function (final) {\n            return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n          }).then(null, reject);\n        } else {\n          _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n        }\n      }\n    });\n  };\n  /**\n   * This will be called on every set call.\n   */\n\n\n  Scope.prototype._notifyScopeListeners = function () {\n    var _this = this; // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n\n\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n\n      this._scopeListeners.forEach(function (callback) {\n        callback(_this);\n      });\n\n      this._notifyingListeners = false;\n    }\n  };\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n\n\n  Scope.prototype._applyFingerprint = function (event) {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : []; // If we have something on the scope, then merge it with event\n\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    } // If we have no data at all, remove empty array default\n\n\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  };\n\n  return Scope;\n}();\n\nexport { Scope };\n/**\n * Retruns the global event processors.\n */\n\nfunction getGlobalEventProcessors() {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  var global = getGlobalObject();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\n\n\nexport function addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}","map":{"version":3,"sources":["../src/scope.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Severity,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n\nimport { Session } from './session';\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifiying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive } = {};\n\n  /** Extra */\n  protected _extra: Extras = {};\n\n  /** Contexts */\n  protected _contexts: Contexts = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      this._session.update({ user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  public setTransaction(name?: string): this {\n    return this.setTransactionName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // often, this span will be a transaction, but it's not guaranteed to be\n    const span = this.getSpan() as undefined | (Span & { spanRecorder: { spans: Span[] } });\n\n    // try it the new way first\n    if (span?.transaction) {\n      return span?.transaction;\n    }\n\n    // fallback to the old way (known bug: this only finds transactions with sampled = true)\n    if (span?.spanRecorder?.spans[0]) {\n      return span.spanRecorder.spans[0] as Transaction;\n    }\n\n    // neither way found a transaction\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n\n    this._breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this._breadcrumbs, mergedBreadcrumb].slice(-maxBreadcrumbs)\n        : [...this._breadcrumbs, mergedBreadcrumb];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction?.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  const global = getGlobalObject<any>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}