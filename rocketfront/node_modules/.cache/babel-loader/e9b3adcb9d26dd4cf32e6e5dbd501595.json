{"ast":null,"code":"import { __assign, __extends, __read } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { getCurrentHub } from '@sentry/browser';\nimport { timestampWithMs } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nexport var UNKNOWN_COMPONENT = 'unknown';\nvar TRACING_GETTER = {\n  id: 'Tracing'\n};\nvar globalTracingIntegration = null;\n/** @deprecated remove when @sentry/apm no longer used */\n\nvar getTracingIntegration = function () {\n  if (globalTracingIntegration) {\n    return globalTracingIntegration;\n  }\n\n  globalTracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n  return globalTracingIntegration;\n};\n/**\n * pushActivity creates an new react activity.\n * Is a no-op if Tracing integration is not valid\n * @param name displayName of component that started activity\n * @deprecated remove when @sentry/apm no longer used\n */\n\n\nfunction pushActivity(name, op) {\n  if (globalTracingIntegration === null) {\n    return null;\n  }\n\n  return globalTracingIntegration.constructor.pushActivity(name, {\n    description: \"<\" + name + \">\",\n    op: \"react.\" + op\n  });\n}\n/**\n * popActivity removes a React activity.\n * Is a no-op if Tracing integration is not valid.\n * @param activity id of activity that is being popped\n * @deprecated remove when @sentry/apm no longer used\n */\n\n\nfunction popActivity(activity) {\n  if (activity === null || globalTracingIntegration === null) {\n    return;\n  }\n\n  globalTracingIntegration.constructor.popActivity(activity);\n}\n/**\n * Obtain a span given an activity id.\n * Is a no-op if Tracing integration is not valid.\n * @param activity activity id associated with obtained span\n * @deprecated remove when @sentry/apm no longer used\n */\n\n\nfunction getActivitySpan(activity) {\n  if (activity === null || globalTracingIntegration === null) {\n    return undefined;\n  }\n\n  return globalTracingIntegration.constructor.getActivitySpan(activity);\n}\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\n\n\nvar Profiler =\n/** @class */\nfunction (_super) {\n  __extends(Profiler, _super);\n\n  function Profiler(props) {\n    var _this = _super.call(this, props) || this; // The activity representing how long it takes to mount a component.\n\n\n    _this._mountActivity = null; // The span of the mount activity\n\n    _this._mountSpan = undefined;\n    var _a = _this.props,\n        name = _a.name,\n        _b = _a.disabled,\n        disabled = _b === void 0 ? false : _b;\n\n    if (disabled) {\n      return _this;\n    } // If they are using @sentry/apm, we need to push/pop activities\n    // eslint-disable-next-line deprecation/deprecation\n\n\n    if (getTracingIntegration()) {\n      // eslint-disable-next-line deprecation/deprecation\n      _this._mountActivity = pushActivity(name, 'mount');\n    } else {\n      var activeTransaction = getActiveTransaction();\n\n      if (activeTransaction) {\n        _this._mountSpan = activeTransaction.startChild({\n          description: \"<\" + name + \">\",\n          op: 'react.mount'\n        });\n      }\n    }\n\n    return _this;\n  } // If a component mounted, we can finish the mount activity.\n\n\n  Profiler.prototype.componentDidMount = function () {\n    if (this._mountSpan) {\n      this._mountSpan.finish();\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      this._mountSpan = getActivitySpan(this._mountActivity); // eslint-disable-next-line deprecation/deprecation\n\n      popActivity(this._mountActivity);\n      this._mountActivity = null;\n    }\n  };\n\n  Profiler.prototype.componentDidUpdate = function (_a) {\n    var _this = this;\n\n    var updateProps = _a.updateProps,\n        _b = _a.includeUpdates,\n        includeUpdates = _b === void 0 ? true : _b; // Only generate an update span if hasUpdateSpan is true, if there is a valid mountSpan,\n    // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n    // We are just trying to give baseline clues for further investigation.\n\n    if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n      // See what props haved changed between the previous props, and the current props. This is\n      // set as data on the span. We just store the prop keys as the values could be potenially very large.\n      var changedProps = Object.keys(updateProps).filter(function (k) {\n        return updateProps[k] !== _this.props.updateProps[k];\n      });\n\n      if (changedProps.length > 0) {\n        // The update span is a point in time span with 0 duration, just signifying that the component\n        // has been updated.\n        var now = timestampWithMs();\n\n        this._mountSpan.startChild({\n          data: {\n            changedProps: changedProps\n          },\n          description: \"<\" + this.props.name + \">\",\n          endTimestamp: now,\n          op: \"react.update\",\n          startTimestamp: now\n        });\n      }\n    }\n  }; // If a component is unmounted, we can say it is no longer on the screen.\n  // This means we can finish the span representing the component render.\n\n\n  Profiler.prototype.componentWillUnmount = function () {\n    var _a = this.props,\n        name = _a.name,\n        _b = _a.includeRender,\n        includeRender = _b === void 0 ? true : _b;\n\n    if (this._mountSpan && includeRender) {\n      // If we were able to obtain the spanId of the mount activity, we should set the\n      // next activity as a child to the component mount activity.\n      this._mountSpan.startChild({\n        description: \"<\" + name + \">\",\n        endTimestamp: timestampWithMs(),\n        op: \"react.render\",\n        startTimestamp: this._mountSpan.endTimestamp\n      });\n    }\n  };\n\n  Profiler.prototype.render = function () {\n    return this.props.children;\n  }; // eslint-disable-next-line @typescript-eslint/member-ordering\n\n\n  Profiler.defaultProps = {\n    disabled: false,\n    includeRender: true,\n    includeUpdates: true\n  };\n  return Profiler;\n}(React.Component);\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\n\n\nfunction withProfiler(WrappedComponent, // We do not want to have `updateProps` given in options, it is instead filled through the HOC.\noptions) {\n  var componentDisplayName = options && options.name || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  var Wrapped = function (props) {\n    return React.createElement(Profiler, __assign({}, options, {\n      name: componentDisplayName,\n      updateProps: props\n    }), React.createElement(WrappedComponent, __assign({}, props)));\n  };\n\n  Wrapped.displayName = \"profiler(\" + componentDisplayName + \")\"; // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\n\n\nfunction useProfiler(name, options) {\n  if (options === void 0) {\n    options = {\n      disabled: false,\n      hasRenderSpan: true\n    };\n  }\n\n  var _a = __read(React.useState(function () {\n    if (options && options.disabled) {\n      return undefined;\n    }\n\n    var activeTransaction = getActiveTransaction();\n\n    if (activeTransaction) {\n      return activeTransaction.startChild({\n        description: \"<\" + name + \">\",\n        op: 'react.mount'\n      });\n    }\n\n    return undefined;\n  }), 1),\n      mountSpan = _a[0];\n\n  React.useEffect(function () {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n\n    return function () {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: \"<\" + name + \">\",\n          endTimestamp: timestampWithMs(),\n          op: \"react.render\",\n          startTimestamp: mountSpan.endTimestamp\n        });\n      }\n    }; // We only want this to run once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n\nexport { withProfiler, Profiler, useProfiler };\n/** Grabs active transaction off scope */\n\nexport function getActiveTransaction(hub) {\n  if (hub === void 0) {\n    hub = getCurrentHub();\n  }\n\n  if (hub) {\n    var scope = hub.getScope();\n\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["../src/profiler.tsx"],"names":[],"mappings":";AAAA;;AACA,SAAS,aAAT,QAAmC,iBAAnC;AAEA,SAAS,eAAT,QAAgC,eAAhC;AACA,OAAO,oBAAP,MAAiC,yBAAjC;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAM,iBAAiB,GAAG,SAA1B;AAEP,IAAM,cAAc,GAAI;AACtB,EAAA,EAAE,EAAE;AADkB,CAAxB;AAIA,IAAI,wBAAwB,GAAuB,IAAnD;AACA;;AACA,IAAM,qBAAqB,GAAG,YAAA;AAC5B,MAAI,wBAAJ,EAA8B;AAC5B,WAAO,wBAAP;AACD;;AAED,EAAA,wBAAwB,GAAG,aAAa,GAAG,cAAhB,CAA+B,cAA/B,CAA3B;AACA,SAAO,wBAAP;AACD,CAPD;AASA;;;;;AAKG;;;AACH,SAAS,YAAT,CAAsB,IAAtB,EAAoC,EAApC,EAA8C;AAC5C,MAAI,wBAAwB,KAAK,IAAjC,EAAuC;AACrC,WAAO,IAAP;AACD;;AAED,SAAQ,wBAAgC,CAAC,WAAjC,CAA6C,YAA7C,CAA0D,IAA1D,EAAgE;AACtE,IAAA,WAAW,EAAE,MAAI,IAAJ,GAAQ,GADiD;AAEtE,IAAA,EAAE,EAAE,WAAS;AAFyD,GAAhE,CAAR;AAID;AAED;;;;;AAKG;;;AACH,SAAS,WAAT,CAAqB,QAArB,EAA4C;AAC1C,MAAI,QAAQ,KAAK,IAAb,IAAqB,wBAAwB,KAAK,IAAtD,EAA4D;AAC1D;AACD;;AAEA,EAAA,wBAAgC,CAAC,WAAjC,CAA6C,WAA7C,CAAyD,QAAzD;AACF;AAED;;;;;AAKG;;;AACH,SAAS,eAAT,CAAyB,QAAzB,EAAgD;AAC9C,MAAI,QAAQ,KAAK,IAAb,IAAqB,wBAAwB,KAAK,IAAtD,EAA4D;AAC1D,WAAO,SAAP;AACD;;AAED,SAAQ,wBAAgC,CAAC,WAAjC,CAA6C,eAA7C,CAA6D,QAA7D,CAAR;AACD;AAgBD;;;AAGG;;;AACH,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuB,EAAA,SAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAarB,WAAA,QAAA,CAAmB,KAAnB,EAAuC;AAAvC,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd,CAAuC,CAZvC;;;AACQ,IAAA,KAAA,CAAA,cAAA,GAAgC,IAAhC,CAW+B,CAVvC;;AACQ,IAAA,KAAA,CAAA,UAAA,GAA+B,SAA/B;AAWA,QAAA,EAAA,GAAA,KAAA,CAAA,KAAA;AAAA,QAAE,IAAA,GAAA,EAAA,CAAA,IAAF;AAAA,QAAQ,EAAA,GAAA,EAAA,CAAA,QAAR;AAAA,QAAQ,QAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EAAR;;AAEN,QAAI,QAAJ,EAAc;;AAEb,KANoC,CAQrC;AACA;;;AACA,QAAI,qBAAqB,EAAzB,EAA6B;AAC3B;AACA,MAAA,KAAI,CAAC,cAAL,GAAsB,YAAY,CAAC,IAAD,EAAO,OAAP,CAAlC;AACD,KAHD,MAGO;AACL,UAAM,iBAAiB,GAAG,oBAAoB,EAA9C;;AACA,UAAI,iBAAJ,EAAuB;AACrB,QAAA,KAAI,CAAC,UAAL,GAAkB,iBAAiB,CAAC,UAAlB,CAA6B;AAC7C,UAAA,WAAW,EAAE,MAAI,IAAJ,GAAQ,GADwB;AAE7C,UAAA,EAAE,EAAE;AAFyC,SAA7B,CAAlB;AAID;AACF;;;AACF,GAnCH,CAqCE;;;AACO,EAAA,QAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;AACE,QAAI,KAAK,UAAT,EAAqB;AACnB,WAAK,UAAL,CAAgB,MAAhB;AACD,KAFD,MAEO;AACL;AACA,WAAK,UAAL,GAAkB,eAAe,CAAC,KAAK,cAAN,CAAjC,CAFK,CAGL;;AACA,MAAA,WAAW,CAAC,KAAK,cAAN,CAAX;AACA,WAAK,cAAL,GAAsB,IAAtB;AACD;AACF,GAVM;;AAYA,EAAA,QAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,EAA1B,EAA+E;AAA/E,QAAA,KAAA,GAAA,IAAA;;QAA4B,WAAA,GAAA,EAAA,CAAA,W;QAAa,EAAA,GAAA,EAAA,CAAA,c;QAAA,cAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,E,CAAsC,CAC7E;AACA;AACA;;AACA,QAAI,cAAc,IAAI,KAAK,UAAvB,IAAqC,WAAW,KAAK,KAAK,KAAL,CAAW,WAApE,EAAiF;AAC/E;AACA;AACA,UAAM,YAAY,GAAG,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,MAAzB,CAAgC,UAAA,CAAA,EAAC;AAAI,eAAA,WAAW,CAAC,CAAD,CAAX,KAAmB,KAAI,CAAC,KAAL,CAAW,WAAX,CAAnB,CAAmB,CAAnB;AAA4C,OAAjF,CAArB;;AACA,UAAI,YAAY,CAAC,MAAb,GAAsB,CAA1B,EAA6B;AAC3B;AACA;AACA,YAAM,GAAG,GAAG,eAAe,EAA3B;;AACA,aAAK,UAAL,CAAgB,UAAhB,CAA2B;AACzB,UAAA,IAAI,EAAE;AACJ,YAAA,YAAY,EAAA;AADR,WADmB;AAIzB,UAAA,WAAW,EAAE,MAAI,KAAK,KAAL,CAAW,IAAf,GAAmB,GAJP;AAKzB,UAAA,YAAY,EAAE,GALW;AAMzB,UAAA,EAAE,EAAE,cANqB;AAOzB,UAAA,cAAc,EAAE;AAPS,SAA3B;AASD;AACF;AACF,GAvBM,CAlDT,CA2EE;AACA;;;AACO,EAAA,QAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAAA,KAAA,KAAA;AAAA,QAAE,IAAA,GAAA,EAAA,CAAA,IAAF;AAAA,QAAQ,EAAA,GAAA,EAAA,CAAA,aAAR;AAAA,QAAQ,aAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,EAAR;;AAEN,QAAI,KAAK,UAAL,IAAmB,aAAvB,EAAsC;AACpC;AACA;AACA,WAAK,UAAL,CAAgB,UAAhB,CAA2B;AACzB,QAAA,WAAW,EAAE,MAAI,IAAJ,GAAQ,GADI;AAEzB,QAAA,YAAY,EAAE,eAAe,EAFJ;AAGzB,QAAA,EAAE,EAAE,cAHqB;AAIzB,QAAA,cAAc,EAAE,KAAK,UAAL,CAAgB;AAJP,OAA3B;AAMD;AACF,GAbM;;AAeA,EAAA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACE,WAAO,KAAK,KAAL,CAAW,QAAlB;AACD,GAFM,CA5FT,CAME;;;AACc,EAAA,QAAA,CAAA,YAAA,GAAuC;AACnD,IAAA,QAAQ,EAAE,KADyC;AAEnD,IAAA,aAAa,EAAE,IAFoC;AAGnD,IAAA,cAAc,EAAE;AAHmC,GAAvC;AAwFhB,SAAA,QAAA;AAAC,CA/FD,CAAuB,KAAK,CAAC,SAA7B,CAAA;AAiGA;;;;;;;AAOG;;;AACH,SAAS,YAAT,CACE,gBADF,EAEE;AACA,OAHF,EAGqF;AAEnF,MAAM,oBAAoB,GACvB,OAAO,IAAI,OAAO,CAAC,IAApB,IAA6B,gBAAgB,CAAC,WAA9C,IAA6D,gBAAgB,CAAC,IAA9E,IAAsF,iBADxF;;AAGA,MAAM,OAAO,GAAgB,UAAC,KAAD,EAAS;AAAK,WACzC,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS,QAAA,CAAA,EAAA,EAAK,OAAL,EAAY;AAAE,MAAA,IAAI,EAAE,oBAAR;AAA8B,MAAA,WAAW,EAAE;AAA3C,KAAZ,CAAT,EACE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB,QAAA,CAAA,EAAA,EAFsB,KAEtB,CAAjB,CADF,CADyC;AAI1C,GAJD;;AAMA,EAAA,OAAO,CAAC,WAAR,GAAsB,cAAY,oBAAZ,GAAgC,GAAtD,CAXmF,CAanF;AACA;;AACA,EAAA,oBAAoB,CAAC,OAAD,EAAU,gBAAV,CAApB;AACA,SAAO,OAAP;AACD;AAED;;;;;;AAMG;;;AACH,SAAS,WAAT,CACE,IADF,EAEE,OAFF,EAKG;AAHD,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA;AACE,MAAA,QAAQ,EAAE,KADZ;AAEE,MAAA,aAAa,EAAE;AAFjB,KAAA;AAGC;;AAEK,MAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,YAAA;;;;;;;;;;;;;;;GAAA,CAAA,EAcJ,CAdI,CAAA;AAAA,MAAC,SAAA,GAAA,EAAA,CAAA,CAAA,CAAD;;AAgBN,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAA;AACd,QAAI,SAAJ,EAAe;AACb,MAAA,SAAS,CAAC,MAAV;AACD;;AAED,WAAO,YAAA;AACL,UAAI,SAAS,IAAI,OAAO,CAAC,aAAzB,EAAwC;AACtC,QAAA,SAAS,CAAC,UAAV,CAAqB;AACnB,UAAA,WAAW,EAAE,MAAI,IAAJ,GAAQ,GADF;AAEnB,UAAA,YAAY,EAAE,eAAe,EAFV;AAGnB,UAAA,EAAE,EAAE,cAHe;AAInB,UAAA,cAAc,EAAE,SAAS,CAAC;AAJP,SAArB;AAMD;AACF,KATD,CALc,CAed;AACA;AACD,GAjBD,EAiBG,EAjBH;AAkBD;;AAED,SAAS,YAAT,EAAuB,QAAvB,EAAiC,WAAjC;AAEA;;AACA,OAAM,SAAU,oBAAV,CAAsD,GAAtD,EAAgF;AAA1B,MAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAW,aAAa,EAAxB;AAA0B;;AACpF,MAAI,GAAJ,EAAS;AACP,QAAM,KAAK,GAAG,GAAG,CAAC,QAAJ,EAAd;;AACA,QAAI,KAAJ,EAAW;AACT,aAAO,KAAK,CAAC,cAAN,EAAP;AACD;AACF;;AAED,SAAO,SAAP;AACD","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { getCurrentHub, Hub } from '@sentry/browser';\nimport { Integration, IntegrationClass, Span, Transaction } from '@sentry/types';\nimport { timestampWithMs } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\n\nexport const UNKNOWN_COMPONENT = 'unknown';\n\nconst TRACING_GETTER = ({\n  id: 'Tracing',\n} as any) as IntegrationClass<Integration>;\n\nlet globalTracingIntegration: Integration | null = null;\n/** @deprecated remove when @sentry/apm no longer used */\nconst getTracingIntegration = (): Integration | null => {\n  if (globalTracingIntegration) {\n    return globalTracingIntegration;\n  }\n\n  globalTracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n  return globalTracingIntegration;\n};\n\n/**\n * pushActivity creates an new react activity.\n * Is a no-op if Tracing integration is not valid\n * @param name displayName of component that started activity\n * @deprecated remove when @sentry/apm no longer used\n */\nfunction pushActivity(name: string, op: string): number | null {\n  if (globalTracingIntegration === null) {\n    return null;\n  }\n\n  return (globalTracingIntegration as any).constructor.pushActivity(name, {\n    description: `<${name}>`,\n    op: `react.${op}`,\n  });\n}\n\n/**\n * popActivity removes a React activity.\n * Is a no-op if Tracing integration is not valid.\n * @param activity id of activity that is being popped\n * @deprecated remove when @sentry/apm no longer used\n */\nfunction popActivity(activity: number | null): void {\n  if (activity === null || globalTracingIntegration === null) {\n    return;\n  }\n\n  (globalTracingIntegration as any).constructor.popActivity(activity);\n}\n\n/**\n * Obtain a span given an activity id.\n * Is a no-op if Tracing integration is not valid.\n * @param activity activity id associated with obtained span\n * @deprecated remove when @sentry/apm no longer used\n */\nfunction getActivitySpan(activity: number | null): Span | undefined {\n  if (activity === null || globalTracingIntegration === null) {\n    return undefined;\n  }\n\n  return (globalTracingIntegration as any).constructor.getActivitySpan(activity) as Span | undefined;\n}\n\nexport type ProfilerProps = {\n  // The name of the component being profiled.\n  name: string;\n  // If the Profiler is disabled. False by default. This is useful if you want to disable profilers\n  // in certain environments.\n  disabled?: boolean;\n  // If time component is on page should be displayed as spans. True by default.\n  includeRender?: boolean;\n  // If component updates should be displayed as spans. True by default.\n  includeUpdates?: boolean;\n  // props given to component being profiled.\n  updateProps: { [key: string]: unknown };\n};\n\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\nclass Profiler extends React.Component<ProfilerProps> {\n  // The activity representing how long it takes to mount a component.\n  private _mountActivity: number | null = null;\n  // The span of the mount activity\n  private _mountSpan: Span | undefined = undefined;\n\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  public static defaultProps: Partial<ProfilerProps> = {\n    disabled: false,\n    includeRender: true,\n    includeUpdates: true,\n  };\n\n  public constructor(props: ProfilerProps) {\n    super(props);\n    const { name, disabled = false } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    // If they are using @sentry/apm, we need to push/pop activities\n    // eslint-disable-next-line deprecation/deprecation\n    if (getTracingIntegration()) {\n      // eslint-disable-next-line deprecation/deprecation\n      this._mountActivity = pushActivity(name, 'mount');\n    } else {\n      const activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        this._mountSpan = activeTransaction.startChild({\n          description: `<${name}>`,\n          op: 'react.mount',\n        });\n      }\n    }\n  }\n\n  // If a component mounted, we can finish the mount activity.\n  public componentDidMount(): void {\n    if (this._mountSpan) {\n      this._mountSpan.finish();\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      this._mountSpan = getActivitySpan(this._mountActivity);\n      // eslint-disable-next-line deprecation/deprecation\n      popActivity(this._mountActivity);\n      this._mountActivity = null;\n    }\n  }\n\n  public componentDidUpdate({ updateProps, includeUpdates = true }: ProfilerProps): void {\n    // Only generate an update span if hasUpdateSpan is true, if there is a valid mountSpan,\n    // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n    // We are just trying to give baseline clues for further investigation.\n    if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n      // See what props haved changed between the previous props, and the current props. This is\n      // set as data on the span. We just store the prop keys as the values could be potenially very large.\n      const changedProps = Object.keys(updateProps).filter(k => updateProps[k] !== this.props.updateProps[k]);\n      if (changedProps.length > 0) {\n        // The update span is a point in time span with 0 duration, just signifying that the component\n        // has been updated.\n        const now = timestampWithMs();\n        this._mountSpan.startChild({\n          data: {\n            changedProps,\n          },\n          description: `<${this.props.name}>`,\n          endTimestamp: now,\n          op: `react.update`,\n          startTimestamp: now,\n        });\n      }\n    }\n  }\n\n  // If a component is unmounted, we can say it is no longer on the screen.\n  // This means we can finish the span representing the component render.\n  public componentWillUnmount(): void {\n    const { name, includeRender = true } = this.props;\n\n    if (this._mountSpan && includeRender) {\n      // If we were able to obtain the spanId of the mount activity, we should set the\n      // next activity as a child to the component mount activity.\n      this._mountSpan.startChild({\n        description: `<${name}>`,\n        endTimestamp: timestampWithMs(),\n        op: `react.render`,\n        startTimestamp: this._mountSpan.endTimestamp,\n      });\n    }\n  }\n\n  public render(): React.ReactNode {\n    return this.props.children;\n  }\n}\n\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\nfunction withProfiler<P extends Record<string, any>>(\n  WrappedComponent: React.ComponentType<P>,\n  // We do not want to have `updateProps` given in options, it is instead filled through the HOC.\n  options?: Pick<Partial<ProfilerProps>, Exclude<keyof ProfilerProps, 'updateProps'>>,\n): React.FC<P> {\n  const componentDisplayName =\n    (options && options.name) || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  const Wrapped: React.FC<P> = (props: P) => (\n    <Profiler {...options} name={componentDisplayName} updateProps={props}>\n      <WrappedComponent {...props} />\n    </Profiler>\n  );\n\n  Wrapped.displayName = `profiler(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\nfunction useProfiler(\n  name: string,\n  options: { disabled?: boolean; hasRenderSpan?: boolean } = {\n    disabled: false,\n    hasRenderSpan: true,\n  },\n): void {\n  const [mountSpan] = React.useState(() => {\n    if (options && options.disabled) {\n      return undefined;\n    }\n\n    const activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      return activeTransaction.startChild({\n        description: `<${name}>`,\n        op: 'react.mount',\n      });\n    }\n\n    return undefined;\n  });\n\n  React.useEffect(() => {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n\n    return (): void => {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: `<${name}>`,\n          endTimestamp: timestampWithMs(),\n          op: `react.render`,\n          startTimestamp: mountSpan.endTimestamp,\n        });\n      }\n    };\n    // We only want this to run once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n\nexport { withProfiler, Profiler, useProfiler };\n\n/** Grabs active transaction off scope */\nexport function getActiveTransaction<T extends Transaction>(hub: Hub = getCurrentHub()): T | undefined {\n  if (hub) {\n    const scope = hub.getScope();\n    if (scope) {\n      return scope.getTransaction() as T | undefined;\n    }\n  }\n\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}