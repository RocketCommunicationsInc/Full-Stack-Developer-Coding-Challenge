{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { logger } from '@sentry/utils';\nexport var installedIntegrations = [];\n/** Gets integration to install */\n\nexport function getIntegrationsToSetup(options) {\n  var defaultIntegrations = options.defaultIntegrations && __spread(options.defaultIntegrations) || [];\n  var userIntegrations = options.integrations;\n  var integrations = [];\n\n  if (Array.isArray(userIntegrations)) {\n    var userIntegrationsNames_1 = userIntegrations.map(function (i) {\n      return i.name;\n    });\n    var pickedIntegrationsNames_1 = []; // Leave only unique default integrations, that were not overridden with provided user integrations\n\n    defaultIntegrations.forEach(function (defaultIntegration) {\n      if (userIntegrationsNames_1.indexOf(defaultIntegration.name) === -1 && pickedIntegrationsNames_1.indexOf(defaultIntegration.name) === -1) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames_1.push(defaultIntegration.name);\n      }\n    }); // Don't add same user integration twice\n\n    userIntegrations.forEach(function (userIntegration) {\n      if (pickedIntegrationsNames_1.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames_1.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    integrations = __spread(defaultIntegrations);\n  } // Make sure that if present, `Debug` integration will always run last\n\n\n  var integrationsNames = integrations.map(function (i) {\n    return i.name;\n  });\n  var alwaysLastToRun = 'Debug';\n\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push.apply(integrations, __spread(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));\n  }\n\n  return integrations;\n}\n/** Setup given integration */\n\nexport function setupIntegration(integration) {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(\"Integration installed: \" + integration.name);\n}\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\n\nexport function setupIntegrations(options) {\n  var integrations = {};\n  getIntegrationsToSetup(options).forEach(function (integration) {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}","map":{"version":3,"sources":["../src/integration.ts"],"names":[],"mappings":";AAAA,SAAS,uBAAT,EAAkC,aAAlC,QAAuD,aAAvD;AAEA,SAAS,MAAT,QAAuB,eAAvB;AAEA,OAAO,IAAM,qBAAqB,GAAa,EAAxC;AAOP;;AACA,OAAM,SAAU,sBAAV,CAAiC,OAAjC,EAAiD;AACrD,MAAM,mBAAmB,GAAI,OAAO,CAAC,mBAAR,IAA2B,QAAA,CAAQ,OAAO,CAAC,mBAAhB,CAA5B,IAAqE,EAAjG;AACA,MAAM,gBAAgB,GAAG,OAAO,CAAC,YAAjC;AACA,MAAI,YAAY,GAAkB,EAAlC;;AACA,MAAI,KAAK,CAAC,OAAN,CAAc,gBAAd,CAAJ,EAAqC;AACnC,QAAM,uBAAqB,GAAG,gBAAgB,CAAC,GAAjB,CAAqB,UAAA,CAAA,EAAC;AAAI,aAAA,CAAC,CAAD,IAAA;AAAM,KAAhC,CAA9B;AACA,QAAM,yBAAuB,GAAa,EAA1C,CAFmC,CAInC;;AACA,IAAA,mBAAmB,CAAC,OAApB,CAA4B,UAAA,kBAAA,EAAkB;AAC5C,UACE,uBAAqB,CAAC,OAAtB,CAA8B,kBAAkB,CAAC,IAAjD,MAA2D,CAAC,CAA5D,IACA,yBAAuB,CAAC,OAAxB,CAAgC,kBAAkB,CAAC,IAAnD,MAA6D,CAAC,CAFhE,EAGE;AACA,QAAA,YAAY,CAAC,IAAb,CAAkB,kBAAlB;AACA,QAAA,yBAAuB,CAAC,IAAxB,CAA6B,kBAAkB,CAAC,IAAhD;AACD;AACF,KARD,EALmC,CAenC;;AACA,IAAA,gBAAgB,CAAC,OAAjB,CAAyB,UAAA,eAAA,EAAe;AACtC,UAAI,yBAAuB,CAAC,OAAxB,CAAgC,eAAe,CAAC,IAAhD,MAA0D,CAAC,CAA/D,EAAkE;AAChE,QAAA,YAAY,CAAC,IAAb,CAAkB,eAAlB;AACA,QAAA,yBAAuB,CAAC,IAAxB,CAA6B,eAAe,CAAC,IAA7C;AACD;AACF,KALD;AAMD,GAtBD,MAsBO,IAAI,OAAO,gBAAP,KAA4B,UAAhC,EAA4C;AACjD,IAAA,YAAY,GAAG,gBAAgB,CAAC,mBAAD,CAA/B;AACA,IAAA,YAAY,GAAG,KAAK,CAAC,OAAN,CAAc,YAAd,IAA8B,YAA9B,GAA6C,CAAC,YAAD,CAA5D;AACD,GAHM,MAGA;AACL,IAAA,YAAY,GAAA,QAAA,CAAO,mBAAP,CAAZ;AACD,GA/BoD,CAiCrD;;;AACA,MAAM,iBAAiB,GAAG,YAAY,CAAC,GAAb,CAAiB,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,CAAD,IAAA;AAAM,GAA5B,CAA1B;AACA,MAAM,eAAe,GAAG,OAAxB;;AACA,MAAI,iBAAiB,CAAC,OAAlB,CAA0B,eAA1B,MAA+C,CAAC,CAApD,EAAuD;AACrD,IAAA,YAAY,CAAC,IAAb,CAAiB,KAAjB,CAAA,YAAA,EAAY,QAAA,CAAS,YAAY,CAAC,MAAb,CAAoB,iBAAiB,CAAC,OAAlB,CAA0B,eAA1B,CAApB,EAAgE,CAAhE,CAAT,CAAZ;AACD;;AAED,SAAO,YAAP;AACD;AAED;;AACA,OAAM,SAAU,gBAAV,CAA2B,WAA3B,EAAmD;AACvD,MAAI,qBAAqB,CAAC,OAAtB,CAA8B,WAAW,CAAC,IAA1C,MAAoD,CAAC,CAAzD,EAA4D;AAC1D;AACD;;AACD,EAAA,WAAW,CAAC,SAAZ,CAAsB,uBAAtB,EAA+C,aAA/C;AACA,EAAA,qBAAqB,CAAC,IAAtB,CAA2B,WAAW,CAAC,IAAvC;AACA,EAAA,MAAM,CAAC,GAAP,CAAW,4BAA0B,WAAW,CAAC,IAAjD;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,iBAAV,CAA+C,OAA/C,EAAyD;AAC7D,MAAM,YAAY,GAAqB,EAAvC;AACA,EAAA,sBAAsB,CAAC,OAAD,CAAtB,CAAgC,OAAhC,CAAwC,UAAA,WAAA,EAAW;AACjD,IAAA,YAAY,CAAC,WAAW,CAAC,IAAb,CAAZ,GAAiC,WAAjC;AACA,IAAA,gBAAgB,CAAC,WAAD,CAAhB;AACD,GAHD;AAIA,SAAO,YAAP;AACD","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport interface IntegrationIndex {\n  [key: string]: Integration;\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n  let integrations: Integration[] = [];\n  if (Array.isArray(userIntegrations)) {\n    const userIntegrationsNames = userIntegrations.map(i => i.name);\n    const pickedIntegrationsNames: string[] = [];\n\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    defaultIntegrations.forEach(defaultIntegration => {\n      if (\n        userIntegrationsNames.indexOf(defaultIntegration.name) === -1 &&\n        pickedIntegrationsNames.indexOf(defaultIntegration.name) === -1\n      ) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames.push(defaultIntegration.name);\n      }\n    });\n\n    // Don't add same user integration twice\n    userIntegrations.forEach(userIntegration => {\n      if (pickedIntegrationsNames.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    integrations = [...defaultIntegrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}