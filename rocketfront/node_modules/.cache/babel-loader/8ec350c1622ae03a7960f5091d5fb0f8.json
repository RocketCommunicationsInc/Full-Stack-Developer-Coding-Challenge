{"ast":null,"code":"import toInteger from 'date-fns/esm/_lib/toInteger/index.js';\nimport getTimezoneOffsetInMilliseconds from 'date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport tzParseTimezone from '../_lib/tzParseTimezone';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimeter: /[T ]/,\n  plainTime: /:/,\n  timeZoneDelimeter: /[Z ]/i,\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [/^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [/^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n  ],\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  // timezone tokens (to identify the presence of a tz)\n  timezone: /([Z+-].*| UTC|(?:[a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?))$/\n};\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function toDate(argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  if (argument === null) {\n    return new Date(NaN);\n  }\n\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  } // Clone the date\n\n\n  if (argument instanceof Date || typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || Object.prototype.toString.call(argument) === '[object Number]') {\n    return new Date(argument);\n  } else if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n  var year = parseYearResult.year;\n  var restDateString = parseYearResult.restDateString;\n  var date = parseDate(restDateString, year);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  }\n\n  if (date) {\n    var timestamp = date.getTime();\n    var time = 0;\n    var offset;\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time);\n\n      if (isNaN(time)) {\n        return new Date(NaN);\n      }\n    }\n\n    if (dateStrings.timezone || options.timeZone) {\n      offset = tzParseTimezone(dateStrings.timezone || options.timeZone, new Date(timestamp + time));\n\n      if (isNaN(offset)) {\n        return new Date(NaN);\n      }\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\n    }\n\n    return new Date(timestamp + time + offset);\n  } else {\n    return new Date(NaN);\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimeter);\n  var timeString;\n\n  if (patterns.plainTime.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    dateStrings.timezone = array[2];\n\n    if (patterns.timeZoneDelimeter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits];\n  var patternYYYYY = patterns.YYYYY[additionalDigits];\n  var token; // YYYY or ±YYYYY\n\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n\n  if (token) {\n    var yearString = token[1];\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    };\n  } // YY or ±YYY\n\n\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n\n  if (token) {\n    var centuryString = token[1];\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    };\n  } // Invalid ISO-formatted year\n\n\n  return {\n    year: null\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null;\n  }\n\n  var token;\n  var date;\n  var month;\n  var week; // YYYY\n\n  if (dateString.length === 0) {\n    date = new Date(0);\n    date.setUTCFullYear(year);\n    return date;\n  } // YYYY-MM\n\n\n  token = patterns.MM.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n\n    if (!validateDate(year, month)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month);\n    return date;\n  } // YYYY-DDD or YYYYDDD\n\n\n  token = patterns.DDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    var dayOfYear = parseInt(token[1], 10);\n\n    if (!validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, 0, dayOfYear);\n    return date;\n  } // yyyy-MM-dd or YYYYMMDD\n\n\n  token = patterns.MMDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    var day = parseInt(token[2], 10);\n\n    if (!validateDate(year, month, day)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, day);\n    return date;\n  } // YYYY-Www or YYYYWww\n\n\n  token = patterns.Www.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n\n    if (!validateWeekDate(year, week)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week);\n  } // YYYY-Www-D or YYYYWwwD\n\n\n  token = patterns.WwwD.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    var dayOfWeek = parseInt(token[2], 10) - 1;\n\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } // Invalid ISO-formatted date\n\n\n  return null;\n}\n\nfunction parseTime(timeString) {\n  var token;\n  var hours;\n  var minutes; // hh\n\n  token = patterns.HH.exec(timeString);\n\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'));\n\n    if (!validateTime(hours)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR;\n  } // hh:mm or hhmm\n\n\n  token = patterns.HHMM.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseFloat(token[2].replace(',', '.'));\n\n    if (!validateTime(hours, minutes)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n  } // hh:mm:ss or hhmmss\n\n\n  token = patterns.HHMMSS.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseInt(token[2], 10);\n    var seconds = parseFloat(token[3].replace(',', '.'));\n\n    if (!validateTime(hours, minutes, seconds)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n  } // Invalid ISO-formatted time\n\n\n  return null;\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  week = week || 0;\n  day = day || 0;\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  if (month < 0 || month > 11) {\n    return false;\n  }\n\n  if (date != null) {\n    if (date < 1) {\n      return false;\n    }\n\n    var isLeapYear = isLeapYearIndex(year);\n\n    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n      return false;\n    }\n\n    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  if (dayOfYear < 1) {\n    return false;\n  }\n\n  var isLeapYear = isLeapYearIndex(year);\n\n  if (isLeapYear && dayOfYear > 366) {\n    return false;\n  }\n\n  if (!isLeapYear && dayOfYear > 365) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction validateWeekDate(year, week, day) {\n  if (week < 0 || week > 52) {\n    return false;\n  }\n\n  if (day != null && (day < 0 || day > 6)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours != null && (hours < 0 || hours >= 25)) {\n    return false;\n  }\n\n  if (minutes != null && (minutes < 0 || minutes >= 60)) {\n    return false;\n  }\n\n  if (seconds != null && (seconds < 0 || seconds >= 60)) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/node_modules/date-fns-tz/esm/toDate/index.js"],"names":["toInteger","getTimezoneOffsetInMilliseconds","tzParseTimezone","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","DEFAULT_ADDITIONAL_DIGITS","patterns","dateTimeDelimeter","plainTime","timeZoneDelimeter","YY","YYY","YYYY","YYYYY","MM","DDD","MMDD","Www","WwwD","HH","HHMM","HHMMSS","timezone","toDate","argument","dirtyOptions","arguments","length","TypeError","Date","NaN","options","additionalDigits","RangeError","Object","prototype","toString","call","getTime","dateStrings","splitDateString","parseYearResult","parseYear","date","year","restDateString","parseDate","isNaN","timestamp","time","offset","parseTime","timeZone","dateString","array","split","timeString","test","substr","token","exec","replace","patternYYY","patternYYYYY","yearString","parseInt","slice","centuryString","month","week","setUTCFullYear","validateDate","dayOfYear","validateDayOfYearDate","day","validateWeekDate","dayOfISOWeekYear","dayOfWeek","hours","minutes","parseFloat","validateTime","seconds","isoWeekYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","getUTCDate","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","isLeapYearIndex","isLeapYear"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,sCAAtB;AACA,OAAOC,+BAAP,MAA4C,4DAA5C;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AAEA,IAAIC,oBAAoB,GAAG,OAA3B;AACA,IAAIC,sBAAsB,GAAG,KAA7B;AACA,IAAIC,yBAAyB,GAAG,CAAhC;AAEA,IAAIC,QAAQ,GAAG;AACbC,EAAAA,iBAAiB,EAAE,MADN;AAEbC,EAAAA,SAAS,EAAE,GAFE;AAGbC,EAAAA,iBAAiB,EAAE,OAHN;AAKb;AACAC,EAAAA,EAAE,EAAE,WANS;AAObC,EAAAA,GAAG,EAAE,CACH,eADG,EACc;AACjB,iBAFG,EAEc;AACjB,iBAHG,CAGc;AAHd,GAPQ;AAYbC,EAAAA,IAAI,EAAE,UAZO;AAabC,EAAAA,KAAK,EAAE,CACL,cADK,EACW;AAChB,gBAFK,EAEW;AAChB,gBAHK,CAGW;AAHX,GAbM;AAmBb;AACAC,EAAAA,EAAE,EAAE,YApBS;AAqBbC,EAAAA,GAAG,EAAE,aArBQ;AAsBbC,EAAAA,IAAI,EAAE,sBAtBO;AAuBbC,EAAAA,GAAG,EAAE,cAvBQ;AAwBbC,EAAAA,IAAI,EAAE,uBAxBO;AA0BbC,EAAAA,EAAE,EAAE,qBA1BS;AA2BbC,EAAAA,IAAI,EAAE,8BA3BO;AA4BbC,EAAAA,MAAM,EAAE,uCA5BK;AA8Bb;AACAC,EAAAA,QAAQ,EAAE;AA/BG,CAAf;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,YAA1B,EAAwC;AACrD,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,mCAAmCF,SAAS,CAACC,MAA7C,GAAsD,UAApE,CAAN;AACD;;AAED,MAAIH,QAAQ,KAAK,IAAjB,EAAuB;AACrB,WAAO,IAAIK,IAAJ,CAASC,GAAT,CAAP;AACD;;AAED,MAAIC,OAAO,GAAGN,YAAY,IAAI,EAA9B;AAEA,MAAIO,gBAAgB,GAClBD,OAAO,CAACC,gBAAR,IAA4B,IAA5B,GACI3B,yBADJ,GAEIL,SAAS,CAAC+B,OAAO,CAACC,gBAAT,CAHf;;AAIA,MAAIA,gBAAgB,KAAK,CAArB,IAA0BA,gBAAgB,KAAK,CAA/C,IAAoDA,gBAAgB,KAAK,CAA7E,EAAgF;AAC9E,UAAM,IAAIC,UAAJ,CAAe,oCAAf,CAAN;AACD,GAjBoD,CAmBrD;;;AACA,MACET,QAAQ,YAAYK,IAApB,IACC,OAAOL,QAAP,KAAoB,QAApB,IAAgCU,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+Bb,QAA/B,MAA6C,eAFhF,EAGE;AACA;AACA,WAAO,IAAIK,IAAJ,CAASL,QAAQ,CAACc,OAAT,EAAT,CAAP;AACD,GAND,MAMO,IACL,OAAOd,QAAP,KAAoB,QAApB,IACAU,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+Bb,QAA/B,MAA6C,iBAFxC,EAGL;AACA,WAAO,IAAIK,IAAJ,CAASL,QAAT,CAAP;AACD,GALM,MAKA,IACL,EACE,OAAOA,QAAP,KAAoB,QAApB,IAAgCU,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+Bb,QAA/B,MAA6C,iBAD/E,CADK,EAIL;AACA,WAAO,IAAIK,IAAJ,CAASC,GAAT,CAAP;AACD;;AAED,MAAIS,WAAW,GAAGC,eAAe,CAAChB,QAAD,CAAjC;AAEA,MAAIiB,eAAe,GAAGC,SAAS,CAACH,WAAW,CAACI,IAAb,EAAmBX,gBAAnB,CAA/B;AACA,MAAIY,IAAI,GAAGH,eAAe,CAACG,IAA3B;AACA,MAAIC,cAAc,GAAGJ,eAAe,CAACI,cAArC;AAEA,MAAIF,IAAI,GAAGG,SAAS,CAACD,cAAD,EAAiBD,IAAjB,CAApB;;AAEA,MAAIG,KAAK,CAACJ,IAAD,CAAT,EAAiB;AACf,WAAO,IAAId,IAAJ,CAASC,GAAT,CAAP;AACD;;AAED,MAAIa,IAAJ,EAAU;AACR,QAAIK,SAAS,GAAGL,IAAI,CAACL,OAAL,EAAhB;AACA,QAAIW,IAAI,GAAG,CAAX;AACA,QAAIC,MAAJ;;AAEA,QAAIX,WAAW,CAACU,IAAhB,EAAsB;AACpBA,MAAAA,IAAI,GAAGE,SAAS,CAACZ,WAAW,CAACU,IAAb,CAAhB;;AAEA,UAAIF,KAAK,CAACE,IAAD,CAAT,EAAiB;AACf,eAAO,IAAIpB,IAAJ,CAASC,GAAT,CAAP;AACD;AACF;;AAED,QAAIS,WAAW,CAACjB,QAAZ,IAAwBS,OAAO,CAACqB,QAApC,EAA8C;AAC5CF,MAAAA,MAAM,GAAGhD,eAAe,CAACqC,WAAW,CAACjB,QAAZ,IAAwBS,OAAO,CAACqB,QAAjC,EAA2C,IAAIvB,IAAJ,CAASmB,SAAS,GAAGC,IAArB,CAA3C,CAAxB;;AACA,UAAIF,KAAK,CAACG,MAAD,CAAT,EAAmB;AACjB,eAAO,IAAIrB,IAAJ,CAASC,GAAT,CAAP;AACD;AACF,KALD,MAKO;AACL;AACAoB,MAAAA,MAAM,GAAGjD,+BAA+B,CAAC,IAAI4B,IAAJ,CAASmB,SAAS,GAAGC,IAArB,CAAD,CAAxC;AACAC,MAAAA,MAAM,GAAGjD,+BAA+B,CAAC,IAAI4B,IAAJ,CAASmB,SAAS,GAAGC,IAAZ,GAAmBC,MAA5B,CAAD,CAAxC;AACD;;AAED,WAAO,IAAIrB,IAAJ,CAASmB,SAAS,GAAGC,IAAZ,GAAmBC,MAA5B,CAAP;AACD,GAzBD,MAyBO;AACL,WAAO,IAAIrB,IAAJ,CAASC,GAAT,CAAP;AACD;AACF;;AAED,SAASU,eAAT,CAAyBa,UAAzB,EAAqC;AACnC,MAAId,WAAW,GAAG,EAAlB;AACA,MAAIe,KAAK,GAAGD,UAAU,CAACE,KAAX,CAAiBjD,QAAQ,CAACC,iBAA1B,CAAZ;AACA,MAAIiD,UAAJ;;AAEA,MAAIlD,QAAQ,CAACE,SAAT,CAAmBiD,IAAnB,CAAwBH,KAAK,CAAC,CAAD,CAA7B,CAAJ,EAAuC;AACrCf,IAAAA,WAAW,CAACI,IAAZ,GAAmB,IAAnB;AACAa,IAAAA,UAAU,GAAGF,KAAK,CAAC,CAAD,CAAlB;AACD,GAHD,MAGO;AACLf,IAAAA,WAAW,CAACI,IAAZ,GAAmBW,KAAK,CAAC,CAAD,CAAxB;AACAE,IAAAA,UAAU,GAAGF,KAAK,CAAC,CAAD,CAAlB;AACAf,IAAAA,WAAW,CAACjB,QAAZ,GAAuBgC,KAAK,CAAC,CAAD,CAA5B;;AACA,QAAIhD,QAAQ,CAACG,iBAAT,CAA2BgD,IAA3B,CAAgClB,WAAW,CAACI,IAA5C,CAAJ,EAAuD;AACrDJ,MAAAA,WAAW,CAACI,IAAZ,GAAmBU,UAAU,CAACE,KAAX,CAAiBjD,QAAQ,CAACG,iBAA1B,EAA6C,CAA7C,CAAnB;AACA+C,MAAAA,UAAU,GAAGH,UAAU,CAACK,MAAX,CAAkBnB,WAAW,CAACI,IAAZ,CAAiBhB,MAAnC,EAA2C0B,UAAU,CAAC1B,MAAtD,CAAb;AACD;AACF;;AAED,MAAI6B,UAAJ,EAAgB;AACd,QAAIG,KAAK,GAAGrD,QAAQ,CAACgB,QAAT,CAAkBsC,IAAlB,CAAuBJ,UAAvB,CAAZ;;AACA,QAAIG,KAAJ,EAAW;AACTpB,MAAAA,WAAW,CAACU,IAAZ,GAAmBO,UAAU,CAACK,OAAX,CAAmBF,KAAK,CAAC,CAAD,CAAxB,EAA6B,EAA7B,CAAnB;AACApB,MAAAA,WAAW,CAACjB,QAAZ,GAAuBqC,KAAK,CAAC,CAAD,CAA5B;AACD,KAHD,MAGO;AACLpB,MAAAA,WAAW,CAACU,IAAZ,GAAmBO,UAAnB;AACD;AACF;;AAED,SAAOjB,WAAP;AACD;;AAED,SAASG,SAAT,CAAmBW,UAAnB,EAA+BrB,gBAA/B,EAAiD;AAC/C,MAAI8B,UAAU,GAAGxD,QAAQ,CAACK,GAAT,CAAaqB,gBAAb,CAAjB;AACA,MAAI+B,YAAY,GAAGzD,QAAQ,CAACO,KAAT,CAAemB,gBAAf,CAAnB;AAEA,MAAI2B,KAAJ,CAJ+C,CAM/C;;AACAA,EAAAA,KAAK,GAAGrD,QAAQ,CAACM,IAAT,CAAcgD,IAAd,CAAmBP,UAAnB,KAAkCU,YAAY,CAACH,IAAb,CAAkBP,UAAlB,CAA1C;;AACA,MAAIM,KAAJ,EAAW;AACT,QAAIK,UAAU,GAAGL,KAAK,CAAC,CAAD,CAAtB;AACA,WAAO;AACLf,MAAAA,IAAI,EAAEqB,QAAQ,CAACD,UAAD,EAAa,EAAb,CADT;AAELnB,MAAAA,cAAc,EAAEQ,UAAU,CAACa,KAAX,CAAiBF,UAAU,CAACrC,MAA5B;AAFX,KAAP;AAID,GAd8C,CAgB/C;;;AACAgC,EAAAA,KAAK,GAAGrD,QAAQ,CAACI,EAAT,CAAYkD,IAAZ,CAAiBP,UAAjB,KAAgCS,UAAU,CAACF,IAAX,CAAgBP,UAAhB,CAAxC;;AACA,MAAIM,KAAJ,EAAW;AACT,QAAIQ,aAAa,GAAGR,KAAK,CAAC,CAAD,CAAzB;AACA,WAAO;AACLf,MAAAA,IAAI,EAAEqB,QAAQ,CAACE,aAAD,EAAgB,EAAhB,CAAR,GAA8B,GAD/B;AAELtB,MAAAA,cAAc,EAAEQ,UAAU,CAACa,KAAX,CAAiBC,aAAa,CAACxC,MAA/B;AAFX,KAAP;AAID,GAxB8C,CA0B/C;;;AACA,SAAO;AACLiB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD;;AAED,SAASE,SAAT,CAAmBO,UAAnB,EAA+BT,IAA/B,EAAqC;AACnC;AACA,MAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,MAAIe,KAAJ;AACA,MAAIhB,IAAJ;AACA,MAAIyB,KAAJ;AACA,MAAIC,IAAJ,CATmC,CAWnC;;AACA,MAAIhB,UAAU,CAAC1B,MAAX,KAAsB,CAA1B,EAA6B;AAC3BgB,IAAAA,IAAI,GAAG,IAAId,IAAJ,CAAS,CAAT,CAAP;AACAc,IAAAA,IAAI,CAAC2B,cAAL,CAAoB1B,IAApB;AACA,WAAOD,IAAP;AACD,GAhBkC,CAkBnC;;;AACAgB,EAAAA,KAAK,GAAGrD,QAAQ,CAACQ,EAAT,CAAY8C,IAAZ,CAAiBP,UAAjB,CAAR;;AACA,MAAIM,KAAJ,EAAW;AACThB,IAAAA,IAAI,GAAG,IAAId,IAAJ,CAAS,CAAT,CAAP;AACAuC,IAAAA,KAAK,GAAGH,QAAQ,CAACN,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,CAAjC;;AAEA,QAAI,CAACY,YAAY,CAAC3B,IAAD,EAAOwB,KAAP,CAAjB,EAAgC;AAC9B,aAAO,IAAIvC,IAAJ,CAASC,GAAT,CAAP;AACD;;AAEDa,IAAAA,IAAI,CAAC2B,cAAL,CAAoB1B,IAApB,EAA0BwB,KAA1B;AACA,WAAOzB,IAAP;AACD,GA9BkC,CAgCnC;;;AACAgB,EAAAA,KAAK,GAAGrD,QAAQ,CAACS,GAAT,CAAa6C,IAAb,CAAkBP,UAAlB,CAAR;;AACA,MAAIM,KAAJ,EAAW;AACThB,IAAAA,IAAI,GAAG,IAAId,IAAJ,CAAS,CAAT,CAAP;AACA,QAAI2C,SAAS,GAAGP,QAAQ,CAACN,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAxB;;AAEA,QAAI,CAACc,qBAAqB,CAAC7B,IAAD,EAAO4B,SAAP,CAA1B,EAA6C;AAC3C,aAAO,IAAI3C,IAAJ,CAASC,GAAT,CAAP;AACD;;AAEDa,IAAAA,IAAI,CAAC2B,cAAL,CAAoB1B,IAApB,EAA0B,CAA1B,EAA6B4B,SAA7B;AACA,WAAO7B,IAAP;AACD,GA5CkC,CA8CnC;;;AACAgB,EAAAA,KAAK,GAAGrD,QAAQ,CAACU,IAAT,CAAc4C,IAAd,CAAmBP,UAAnB,CAAR;;AACA,MAAIM,KAAJ,EAAW;AACThB,IAAAA,IAAI,GAAG,IAAId,IAAJ,CAAS,CAAT,CAAP;AACAuC,IAAAA,KAAK,GAAGH,QAAQ,CAACN,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,CAAjC;AACA,QAAIe,GAAG,GAAGT,QAAQ,CAACN,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAlB;;AAEA,QAAI,CAACY,YAAY,CAAC3B,IAAD,EAAOwB,KAAP,EAAcM,GAAd,CAAjB,EAAqC;AACnC,aAAO,IAAI7C,IAAJ,CAASC,GAAT,CAAP;AACD;;AAEDa,IAAAA,IAAI,CAAC2B,cAAL,CAAoB1B,IAApB,EAA0BwB,KAA1B,EAAiCM,GAAjC;AACA,WAAO/B,IAAP;AACD,GA3DkC,CA6DnC;;;AACAgB,EAAAA,KAAK,GAAGrD,QAAQ,CAACW,GAAT,CAAa2C,IAAb,CAAkBP,UAAlB,CAAR;;AACA,MAAIM,KAAJ,EAAW;AACTU,IAAAA,IAAI,GAAGJ,QAAQ,CAACN,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,CAAhC;;AAEA,QAAI,CAACgB,gBAAgB,CAAC/B,IAAD,EAAOyB,IAAP,CAArB,EAAmC;AACjC,aAAO,IAAIxC,IAAJ,CAASC,GAAT,CAAP;AACD;;AAED,WAAO8C,gBAAgB,CAAChC,IAAD,EAAOyB,IAAP,CAAvB;AACD,GAvEkC,CAyEnC;;;AACAV,EAAAA,KAAK,GAAGrD,QAAQ,CAACY,IAAT,CAAc0C,IAAd,CAAmBP,UAAnB,CAAR;;AACA,MAAIM,KAAJ,EAAW;AACTU,IAAAA,IAAI,GAAGJ,QAAQ,CAACN,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,CAAhC;AACA,QAAIkB,SAAS,GAAGZ,QAAQ,CAACN,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,CAAzC;;AAEA,QAAI,CAACgB,gBAAgB,CAAC/B,IAAD,EAAOyB,IAAP,EAAaQ,SAAb,CAArB,EAA8C;AAC5C,aAAO,IAAIhD,IAAJ,CAASC,GAAT,CAAP;AACD;;AAED,WAAO8C,gBAAgB,CAAChC,IAAD,EAAOyB,IAAP,EAAaQ,SAAb,CAAvB;AACD,GApFkC,CAsFnC;;;AACA,SAAO,IAAP;AACD;;AAED,SAAS1B,SAAT,CAAmBK,UAAnB,EAA+B;AAC7B,MAAIG,KAAJ;AACA,MAAImB,KAAJ;AACA,MAAIC,OAAJ,CAH6B,CAK7B;;AACApB,EAAAA,KAAK,GAAGrD,QAAQ,CAACa,EAAT,CAAYyC,IAAZ,CAAiBJ,UAAjB,CAAR;;AACA,MAAIG,KAAJ,EAAW;AACTmB,IAAAA,KAAK,GAAGE,UAAU,CAACrB,KAAK,CAAC,CAAD,CAAL,CAASE,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,CAAD,CAAlB;;AAEA,QAAI,CAACoB,YAAY,CAACH,KAAD,CAAjB,EAA0B;AACxB,aAAOhD,GAAP;AACD;;AAED,WAAQgD,KAAK,GAAG,EAAT,GAAe3E,oBAAtB;AACD,GAf4B,CAiB7B;;;AACAwD,EAAAA,KAAK,GAAGrD,QAAQ,CAACc,IAAT,CAAcwC,IAAd,CAAmBJ,UAAnB,CAAR;;AACA,MAAIG,KAAJ,EAAW;AACTmB,IAAAA,KAAK,GAAGb,QAAQ,CAACN,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAhB;AACAoB,IAAAA,OAAO,GAAGC,UAAU,CAACrB,KAAK,CAAC,CAAD,CAAL,CAASE,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,CAAD,CAApB;;AAEA,QAAI,CAACoB,YAAY,CAACH,KAAD,EAAQC,OAAR,CAAjB,EAAmC;AACjC,aAAOjD,GAAP;AACD;;AAED,WAAQgD,KAAK,GAAG,EAAT,GAAe3E,oBAAf,GAAsC4E,OAAO,GAAG3E,sBAAvD;AACD,GA5B4B,CA8B7B;;;AACAuD,EAAAA,KAAK,GAAGrD,QAAQ,CAACe,MAAT,CAAgBuC,IAAhB,CAAqBJ,UAArB,CAAR;;AACA,MAAIG,KAAJ,EAAW;AACTmB,IAAAA,KAAK,GAAGb,QAAQ,CAACN,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAhB;AACAoB,IAAAA,OAAO,GAAGd,QAAQ,CAACN,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAlB;AACA,QAAIuB,OAAO,GAAGF,UAAU,CAACrB,KAAK,CAAC,CAAD,CAAL,CAASE,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,CAAD,CAAxB;;AAEA,QAAI,CAACoB,YAAY,CAACH,KAAD,EAAQC,OAAR,EAAiBG,OAAjB,CAAjB,EAA4C;AAC1C,aAAOpD,GAAP;AACD;;AAED,WAAQgD,KAAK,GAAG,EAAT,GAAe3E,oBAAf,GAAsC4E,OAAO,GAAG3E,sBAAhD,GAAyE8E,OAAO,GAAG,IAA1F;AACD,GA1C4B,CA4C7B;;;AACA,SAAO,IAAP;AACD;;AAED,SAASN,gBAAT,CAA0BO,WAA1B,EAAuCd,IAAvC,EAA6CK,GAA7C,EAAkD;AAChDL,EAAAA,IAAI,GAAGA,IAAI,IAAI,CAAf;AACAK,EAAAA,GAAG,GAAGA,GAAG,IAAI,CAAb;AACA,MAAI/B,IAAI,GAAG,IAAId,IAAJ,CAAS,CAAT,CAAX;AACAc,EAAAA,IAAI,CAAC2B,cAAL,CAAoBa,WAApB,EAAiC,CAAjC,EAAoC,CAApC;AACA,MAAIC,kBAAkB,GAAGzC,IAAI,CAAC0C,SAAL,MAAoB,CAA7C;AACA,MAAIC,IAAI,GAAGjB,IAAI,GAAG,CAAP,GAAWK,GAAX,GAAiB,CAAjB,GAAqBU,kBAAhC;AACAzC,EAAAA,IAAI,CAAC4C,UAAL,CAAgB5C,IAAI,CAAC6C,UAAL,KAAoBF,IAApC;AACA,SAAO3C,IAAP;AACD,C,CAED;;;AAEA,IAAI8C,aAAa,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAApB;AACA,IAAIC,uBAAuB,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAA9B;;AAEA,SAASC,eAAT,CAAyB/C,IAAzB,EAA+B;AAC7B,SAAOA,IAAI,GAAG,GAAP,KAAe,CAAf,IAAqBA,IAAI,GAAG,CAAP,KAAa,CAAb,IAAkBA,IAAI,GAAG,GAAP,KAAe,CAA7D;AACD;;AAED,SAAS2B,YAAT,CAAsB3B,IAAtB,EAA4BwB,KAA5B,EAAmCzB,IAAnC,EAAyC;AACvC,MAAIyB,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,EAAzB,EAA6B;AAC3B,WAAO,KAAP;AACD;;AAED,MAAIzB,IAAI,IAAI,IAAZ,EAAkB;AAChB,QAAIA,IAAI,GAAG,CAAX,EAAc;AACZ,aAAO,KAAP;AACD;;AAED,QAAIiD,UAAU,GAAGD,eAAe,CAAC/C,IAAD,CAAhC;;AACA,QAAIgD,UAAU,IAAIjD,IAAI,GAAG+C,uBAAuB,CAACtB,KAAD,CAAhD,EAAyD;AACvD,aAAO,KAAP;AACD;;AACD,QAAI,CAACwB,UAAD,IAAejD,IAAI,GAAG8C,aAAa,CAACrB,KAAD,CAAvC,EAAgD;AAC9C,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAED,SAASK,qBAAT,CAA+B7B,IAA/B,EAAqC4B,SAArC,EAAgD;AAC9C,MAAIA,SAAS,GAAG,CAAhB,EAAmB;AACjB,WAAO,KAAP;AACD;;AAED,MAAIoB,UAAU,GAAGD,eAAe,CAAC/C,IAAD,CAAhC;;AACA,MAAIgD,UAAU,IAAIpB,SAAS,GAAG,GAA9B,EAAmC;AACjC,WAAO,KAAP;AACD;;AACD,MAAI,CAACoB,UAAD,IAAepB,SAAS,GAAG,GAA/B,EAAoC;AAClC,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAASG,gBAAT,CAA0B/B,IAA1B,EAAgCyB,IAAhC,EAAsCK,GAAtC,EAA2C;AACzC,MAAIL,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAG,EAAvB,EAA2B;AACzB,WAAO,KAAP;AACD;;AAED,MAAIK,GAAG,IAAI,IAAP,KAAgBA,GAAG,GAAG,CAAN,IAAWA,GAAG,GAAG,CAAjC,CAAJ,EAAyC;AACvC,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAASO,YAAT,CAAsBH,KAAtB,EAA6BC,OAA7B,EAAsCG,OAAtC,EAA+C;AAC7C,MAAIJ,KAAK,IAAI,IAAT,KAAkBA,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI,EAAxC,CAAJ,EAAiD;AAC/C,WAAO,KAAP;AACD;;AAED,MAAIC,OAAO,IAAI,IAAX,KAAoBA,OAAO,GAAG,CAAV,IAAeA,OAAO,IAAI,EAA9C,CAAJ,EAAuD;AACrD,WAAO,KAAP;AACD;;AAED,MAAIG,OAAO,IAAI,IAAX,KAAoBA,OAAO,GAAG,CAAV,IAAeA,OAAO,IAAI,EAA9C,CAAJ,EAAuD;AACrD,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD","sourcesContent":["import toInteger from 'date-fns/esm/_lib/toInteger/index.js'\nimport getTimezoneOffsetInMilliseconds from 'date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js'\nimport tzParseTimezone from '../_lib/tzParseTimezone'\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\n\nvar patterns = {\n  dateTimeDelimeter: /[T ]/,\n  plainTime: /:/,\n  timeZoneDelimeter: /[Z ]/i,\n\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [\n    /^([+-]\\d{2})$/, // 0 additional digits\n    /^([+-]\\d{3})$/, // 1 additional digit\n    /^([+-]\\d{4})$/, // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [\n    /^([+-]\\d{4})/, // 0 additional digits\n    /^([+-]\\d{5})/, // 1 additional digit\n    /^([+-]\\d{6})/, // 2 additional digits\n  ],\n\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n\n  // timezone tokens (to identify the presence of a tz)\n  timezone: /([Z+-].*| UTC|(?:[a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?))$/,\n}\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport default function toDate(argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  if (argument === null) {\n    return new Date(NaN)\n  }\n\n  var options = dirtyOptions || {}\n\n  var additionalDigits =\n    options.additionalDigits == null\n      ? DEFAULT_ADDITIONAL_DIGITS\n      : toInteger(options.additionalDigits)\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2')\n  }\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (\n    typeof argument === 'number' ||\n    Object.prototype.toString.call(argument) === '[object Number]'\n  ) {\n    return new Date(argument)\n  } else if (\n    !(\n      typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]'\n    )\n  ) {\n    return new Date(NaN)\n  }\n\n  var dateStrings = splitDateString(argument)\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n\n  var date = parseDate(restDateString, year)\n\n  if (isNaN(date)) {\n    return new Date(NaN)\n  }\n\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time)\n\n      if (isNaN(time)) {\n        return new Date(NaN)\n      }\n    }\n\n    if (dateStrings.timezone || options.timeZone) {\n      offset = tzParseTimezone(dateStrings.timezone || options.timeZone, new Date(timestamp + time))\n      if (isNaN(offset)) {\n        return new Date(NaN)\n      }\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time))\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset))\n    }\n\n    return new Date(timestamp + time + offset)\n  } else {\n    return new Date(NaN)\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {}\n  var array = dateString.split(patterns.dateTimeDelimeter)\n  var timeString\n\n  if (patterns.plainTime.test(array[0])) {\n    dateStrings.date = null\n    timeString = array[0]\n  } else {\n    dateStrings.date = array[0]\n    timeString = array[1]\n    dateStrings.timezone = array[2]\n    if (patterns.timeZoneDelimeter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0]\n      timeString = dateString.substr(dateStrings.date.length, dateString.length)\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString)\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '')\n      dateStrings.timezone = token[1]\n    } else {\n      dateStrings.time = timeString\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits]\n  var patternYYYYY = patterns.YYYYY[additionalDigits]\n\n  var token\n\n  // YYYY or ±YYYYY\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length),\n    }\n  }\n\n  // YY or ±YYY\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length),\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null,\n  }\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token\n  var date\n  var month\n  var week\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n\n  // YYYY-MM\n  token = patterns.MM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n\n    if (!validateDate(year, month)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, month)\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = patterns.DDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n\n    if (!validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n\n  // yyyy-MM-dd or YYYYMMDD\n  token = patterns.MMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n\n    if (!validateDate(year, month, day)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = patterns.Www.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n\n    if (!validateWeekDate(year, week)) {\n      return new Date(NaN)\n    }\n\n    return dayOfISOWeekYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = patterns.WwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN)\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime(timeString) {\n  var token\n  var hours\n  var minutes\n\n  // hh\n  token = patterns.HH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n\n    if (!validateTime(hours)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = patterns.HHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n\n    if (!validateTime(hours, minutes)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE\n  }\n\n  // hh:mm:ss or hhmmss\n  token = patterns.HHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n\n    if (!validateTime(hours, minutes, seconds)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  week = week || 0\n  day = day || 0\n  var date = new Date(0)\n  date.setUTCFullYear(isoWeekYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n\n// Validation functions\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)\n}\n\nfunction validateDate(year, month, date) {\n  if (month < 0 || month > 11) {\n    return false\n  }\n\n  if (date != null) {\n    if (date < 1) {\n      return false\n    }\n\n    var isLeapYear = isLeapYearIndex(year)\n    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n      return false\n    }\n    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  if (dayOfYear < 1) {\n    return false\n  }\n\n  var isLeapYear = isLeapYearIndex(year)\n  if (isLeapYear && dayOfYear > 366) {\n    return false\n  }\n  if (!isLeapYear && dayOfYear > 365) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateWeekDate(year, week, day) {\n  if (week < 0 || week > 52) {\n    return false\n  }\n\n  if (day != null && (day < 0 || day > 6)) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours != null && (hours < 0 || hours >= 25)) {\n    return false\n  }\n\n  if (minutes != null && (minutes < 0 || minutes >= 60)) {\n    return false\n  }\n\n  if (seconds != null && (seconds < 0 || seconds >= 60)) {\n    return false\n  }\n\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}