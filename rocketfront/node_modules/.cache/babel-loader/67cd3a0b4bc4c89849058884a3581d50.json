{"ast":null,"code":"import tzParseTimezone from '../_lib/tzParseTimezone';\nimport toDate from '../toDate';\n/**\n * @name utcToZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with the relevant UTC time\n * @param {String} timeZone - the time zone to get local time for, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = utcToZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\n\nexport default function utcToZonedTime(dirtyDate, timeZone, options) {\n  var date = toDate(dirtyDate, options);\n  var offsetMilliseconds = tzParseTimezone(timeZone, date, true) || 0;\n  var d = new Date(date.getTime() - offsetMilliseconds);\n  var zonedTime = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n  return zonedTime;\n}","map":{"version":3,"sources":["/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/node_modules/date-fns-tz/esm/utcToZonedTime/index.js"],"names":["tzParseTimezone","toDate","utcToZonedTime","dirtyDate","timeZone","options","date","offsetMilliseconds","d","Date","getTime","zonedTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,yBAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CC,OAA7C,EAAsD;AACnE,MAAIC,IAAI,GAAGL,MAAM,CAACE,SAAD,EAAYE,OAAZ,CAAjB;AAEA,MAAIE,kBAAkB,GAAGP,eAAe,CAACI,QAAD,EAAWE,IAAX,EAAiB,IAAjB,CAAf,IAAyC,CAAlE;AAEA,MAAIE,CAAC,GAAG,IAAIC,IAAJ,CAASH,IAAI,CAACI,OAAL,KAAiBH,kBAA1B,CAAR;AAEA,MAAII,SAAS,GAAG,IAAIF,IAAJ,CACdD,CAAC,CAACI,cAAF,EADc,EAEdJ,CAAC,CAACK,WAAF,EAFc,EAGdL,CAAC,CAACM,UAAF,EAHc,EAIdN,CAAC,CAACO,WAAF,EAJc,EAKdP,CAAC,CAACQ,aAAF,EALc,EAMdR,CAAC,CAACS,aAAF,EANc,EAOdT,CAAC,CAACU,kBAAF,EAPc,CAAhB;AAUA,SAAOP,SAAP;AACD","sourcesContent":["import tzParseTimezone from '../_lib/tzParseTimezone'\nimport toDate from '../toDate'\n\n/**\n * @name utcToZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with the relevant UTC time\n * @param {String} timeZone - the time zone to get local time for, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = utcToZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\nexport default function utcToZonedTime(dirtyDate, timeZone, options) {\n  var date = toDate(dirtyDate, options)\n\n  var offsetMilliseconds = tzParseTimezone(timeZone, date, true) || 0\n\n  var d = new Date(date.getTime() - offsetMilliseconds)\n\n  var zonedTime = new Date(\n    d.getUTCFullYear(),\n    d.getUTCMonth(),\n    d.getUTCDate(),\n    d.getUTCHours(),\n    d.getUTCMinutes(),\n    d.getUTCSeconds(),\n    d.getUTCMilliseconds()\n  )\n\n  return zonedTime\n}\n"]},"metadata":{},"sourceType":"module"}