{"ast":null,"code":"import { logger } from './logger';\nimport { getGlobalObject } from './misc';\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsErrorEvent() {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsDOMError() {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsDOMException() {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsFetch() {\n  if (!('fetch' in getGlobalObject())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function isNativeFetch(func) {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\n\nexport function supportsNativeFetch() {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  var global = getGlobalObject(); // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  } // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n\n\n  var result = false;\n  var doc = global.document; // eslint-disable-next-line deprecation/deprecation\n\n  if (doc && typeof doc.createElement === \"function\") {\n    try {\n      var sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsReportingObserver() {\n  return 'ReportingObserver' in getGlobalObject();\n}\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsReferrerPolicy() {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\n\nexport function supportsHistory() {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  var global = getGlobalObject();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var chrome = global.chrome;\n  var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n  var hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n  return !isChromePackagedApp && hasHistoryApi;\n}","map":{"version":3,"sources":["../src/supports.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from './logger';\nimport { getGlobalObject } from './misc';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === `function`) {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}