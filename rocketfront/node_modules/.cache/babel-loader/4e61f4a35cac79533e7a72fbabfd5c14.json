{"ast":null,"code":"var _jsxFileName = \"/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/src/components/AlertDisplay.js\";\nimport React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getAlerts } from \"../redux/actions/AlertsActions\";\nimport AlertInfo from \"./AlertInfo\";\nimport { RuxLog } from \"@astrouxds/rux-log/rux-log.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AlertDisplay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      alerts: []\n    };\n  }\n\n  componentDidMount(prevProps) {\n    if (this.props !== prevProps) {\n      this.props.getAlerts();\n    }\n  }\n\n  renderLogData() {\n    let myLogData = [];\n    this.props.alerts.map(alert => {\n      myLogData.push({\n        message: alert.errorMessage,\n        category: alert.errorCategory,\n        timestamp: new Date(alert.errorTime),\n        status: alert.errorSeverity\n      });\n    });\n    console.log(myLogData);\n    return myLogData;\n  } // renderAlerts() {\n  // \treturn this.props.alerts.alerts.map(this.renderSingleAlert);\n  // }\n  // renderSingleAlert = (alertObj) => {\n  // \treturn (\n  // \t\t<AlertInfo\n  // \t\t\tkey={alertObj.errorId}\n  // \t\t\tid={alertObj.errorId}\n  // \t\t\terrorMessage={alertObj.errorMessage}\n  // \t\t\terrorCategory={alertObj.errorCategory}\n  // \t\t\terrorTime={alertObj.errorTime}\n  // \t\t/>\n  // \t);\n  // };\n\n\n  render() {\n    // return <div id=\"alerts\">{this.renderAlerts()}</div>;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"rux-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"rux-table__column-head\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst mSTP = state => {\n  return {\n    alerts: state.alerts.alerts\n  };\n};\n\nconst mDTP = dispatch => {\n  return {\n    getAlerts: info => dispatch(getAlerts(info))\n  };\n};\n\nexport default connect(mSTP, mDTP)(AlertDisplay);","map":{"version":3,"sources":["/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/src/components/AlertDisplay.js"],"names":["React","Component","Redirect","Link","connect","getAlerts","AlertInfo","RuxLog","AlertDisplay","constructor","props","state","alerts","componentDidMount","prevProps","renderLogData","myLogData","map","alert","push","message","errorMessage","category","errorCategory","timestamp","Date","errorTime","status","errorSeverity","console","log","render","mSTP","mDTP","dispatch","info"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,IAAnB,QAA+B,kBAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,MAAT,QAAuB,+BAAvB;;;AAEA,MAAMC,YAAN,SAA2BP,SAA3B,CAAqC;AACpCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,MAAM,EAAE;AADI,KAAb;AAGA;;AAEDC,EAAAA,iBAAiB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKJ,KAAL,KAAeI,SAAnB,EAA8B;AAC7B,WAAKJ,KAAL,CAAWL,SAAX;AACA;AACD;;AAEDU,EAAAA,aAAa,GAAG;AACf,QAAIC,SAAS,GAAG,EAAhB;AACA,SAAKN,KAAL,CAAWE,MAAX,CAAkBK,GAAlB,CAAuBC,KAAD,IAAW;AAChCF,MAAAA,SAAS,CAACG,IAAV,CAAe;AACdC,QAAAA,OAAO,EAAEF,KAAK,CAACG,YADD;AAEdC,QAAAA,QAAQ,EAAEJ,KAAK,CAACK,aAFF;AAGdC,QAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASP,KAAK,CAACQ,SAAf,CAHG;AAIdC,QAAAA,MAAM,EAAET,KAAK,CAACU;AAJA,OAAf;AAMA,KAPD;AAQAC,IAAAA,OAAO,CAACC,GAAR,CAAYd,SAAZ;AACA,WAAOA,SAAP;AACA,GA1BmC,CA2BpC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAe,EAAAA,MAAM,GAAG;AACR;AACA,wBACC;AAAA,6BACC;AAAO,QAAA,SAAS,EAAC,WAAjB;AAAA,gCACC;AAAI,UAAA,SAAS,EAAC,wBAAd;AAAA,kCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHD,eAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJD;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAOC;AAAA,iCACC;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD;AAeA;;AA5DmC;;AA+DrC,MAAMC,IAAI,GAAIrB,KAAD,IAAW;AACvB,SAAO;AACNC,IAAAA,MAAM,EAAED,KAAK,CAACC,MAAN,CAAaA;AADf,GAAP;AAGA,CAJD;;AAMA,MAAMqB,IAAI,GAAIC,QAAD,IAAc;AAC1B,SAAO;AACN7B,IAAAA,SAAS,EAAG8B,IAAD,IAAUD,QAAQ,CAAC7B,SAAS,CAAC8B,IAAD,CAAV;AADvB,GAAP;AAGA,CAJD;;AAMA,eAAe/B,OAAO,CAAC4B,IAAD,EAAOC,IAAP,CAAP,CAAoBzB,YAApB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getAlerts } from \"../redux/actions/AlertsActions\";\nimport AlertInfo from \"./AlertInfo\";\nimport { RuxLog } from \"@astrouxds/rux-log/rux-log.js\";\n\nclass AlertDisplay extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\talerts: [],\n\t\t};\n\t}\n\n\tcomponentDidMount(prevProps) {\n\t\tif (this.props !== prevProps) {\n\t\t\tthis.props.getAlerts();\n\t\t}\n\t}\n\n\trenderLogData() {\n\t\tlet myLogData = [];\n\t\tthis.props.alerts.map((alert) => {\n\t\t\tmyLogData.push({\n\t\t\t\tmessage: alert.errorMessage,\n\t\t\t\tcategory: alert.errorCategory,\n\t\t\t\ttimestamp: new Date(alert.errorTime),\n\t\t\t\tstatus: alert.errorSeverity,\n\t\t\t});\n\t\t});\n\t\tconsole.log(myLogData);\n\t\treturn myLogData;\n\t}\n\t// renderAlerts() {\n\t// \treturn this.props.alerts.alerts.map(this.renderSingleAlert);\n\t// }\n\n\t// renderSingleAlert = (alertObj) => {\n\t// \treturn (\n\t// \t\t<AlertInfo\n\t// \t\t\tkey={alertObj.errorId}\n\t// \t\t\tid={alertObj.errorId}\n\t// \t\t\terrorMessage={alertObj.errorMessage}\n\t// \t\t\terrorCategory={alertObj.errorCategory}\n\t// \t\t\terrorTime={alertObj.errorTime}\n\t// \t\t/>\n\t// \t);\n\t// };\n\n\trender() {\n\t\t// return <div id=\"alerts\">{this.renderAlerts()}</div>;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<table className=\"rux-table\">\n\t\t\t\t\t<tr className=\"rux-table__column-head\">\n\t\t\t\t\t\t<th>Category</th>\n\t\t\t\t\t\t<th>Status</th>\n\t\t\t\t\t\t<th>Message</th>\n\t\t\t\t\t\t<th>Time</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td></td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mSTP = (state) => {\n\treturn {\n\t\talerts: state.alerts.alerts,\n\t};\n};\n\nconst mDTP = (dispatch) => {\n\treturn {\n\t\tgetAlerts: (info) => dispatch(getAlerts(info)),\n\t};\n};\n\nexport default connect(mSTP, mDTP)(AlertDisplay);\n"]},"metadata":{},"sourceType":"module"}