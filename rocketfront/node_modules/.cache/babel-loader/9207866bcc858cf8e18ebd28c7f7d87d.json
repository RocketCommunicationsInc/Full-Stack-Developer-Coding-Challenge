{"ast":null,"code":"import { __assign } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { configureScope } from '@sentry/minimal';\nvar ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nvar ACTION_BREADCRUMB_TYPE = 'info';\nvar STATE_CONTEXT_KEY = 'redux.state';\nvar defaultOptions = {\n  actionTransformer: function (action) {\n    return action;\n  },\n  stateTransformer: function (state) {\n    return state || null;\n  }\n};\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\n\nfunction createReduxEnhancer(enhancerOptions) {\n  // Note: We return an any type as to not have type conflicts.\n  var options = __assign(__assign({}, defaultOptions), enhancerOptions);\n\n  return function (next) {\n    return function (reducer, initialState) {\n      var sentryReducer = function (state, action) {\n        var newState = reducer(state, action);\n        configureScope(function (scope) {\n          /* Action breadcrumbs */\n          var transformedAction = options.actionTransformer(action);\n\n          if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n            scope.addBreadcrumb({\n              category: ACTION_BREADCRUMB_CATEGORY,\n              data: transformedAction,\n              type: ACTION_BREADCRUMB_TYPE\n            });\n          }\n          /* Set latest state to scope */\n\n\n          var transformedState = options.stateTransformer(newState);\n\n          if (typeof transformedState !== 'undefined' && transformedState !== null) {\n            scope.setContext(STATE_CONTEXT_KEY, transformedState);\n          } else {\n            scope.setContext(STATE_CONTEXT_KEY, null);\n          }\n          /* Allow user to configure scope with latest state */\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n          var configureScopeWithState = options.configureScopeWithState;\n\n          if (typeof configureScopeWithState === 'function') {\n            configureScopeWithState(scope, newState);\n          }\n        });\n        return newState;\n      };\n\n      return next(sentryReducer, initialState);\n    };\n  };\n}\n\nexport { createReduxEnhancer };","map":{"version":3,"sources":["../src/redux.ts"],"names":[],"mappings":";AAAA;;AACA,SAAS,cAAT,QAA+B,iBAA/B;AAmEA,IAAM,0BAA0B,GAAG,cAAnC;AACA,IAAM,sBAAsB,GAAG,MAA/B;AACA,IAAM,iBAAiB,GAAG,aAA1B;AAEA,IAAM,cAAc,GAA0B;AAC5C,EAAA,iBAAiB,EAAE,UAAA,MAAA,EAAM;AAAI,WAAA,MAAA;AAAM,GADS;AAE5C,EAAA,gBAAgB,EAAE,UAAA,KAAA,EAAK;AAAI,WAAA,KAAK,IAAL,IAAA;AAAa;AAFI,CAA9C;AAKA;;;;AAIG;;AACH,SAAS,mBAAT,CAA6B,eAA7B,EAA6E;AAC3E;AACA,MAAM,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACR,cADQ,CAAA,EAER,eAFQ,CAAb;;AAKA,SAAO,UAAC,IAAD,EAAgC;AAAgC,WAAA,UACrE,OADqE,EAErE,YAFqE,EAErC;AAEhC,UAAM,aAAa,GAAkB,UAAC,KAAD,EAAQ,MAAR,EAAc;AACjD,YAAM,QAAQ,GAAG,OAAO,CAAC,KAAD,EAAQ,MAAR,CAAxB;AAEA,QAAA,cAAc,CAAC,UAAA,KAAA,EAAK;AAClB;AACA,cAAM,iBAAiB,GAAG,OAAO,CAAC,iBAAR,CAA0B,MAA1B,CAA1B;;AACA,cAAI,OAAO,iBAAP,KAA6B,WAA7B,IAA4C,iBAAiB,KAAK,IAAtE,EAA4E;AAC1E,YAAA,KAAK,CAAC,aAAN,CAAoB;AAClB,cAAA,QAAQ,EAAE,0BADQ;AAElB,cAAA,IAAI,EAAE,iBAFY;AAGlB,cAAA,IAAI,EAAE;AAHY,aAApB;AAKD;AAED;;;AACA,cAAM,gBAAgB,GAAG,OAAO,CAAC,gBAAR,CAAyB,QAAzB,CAAzB;;AACA,cAAI,OAAO,gBAAP,KAA4B,WAA5B,IAA2C,gBAAgB,KAAK,IAApE,EAA0E;AACxE,YAAA,KAAK,CAAC,UAAN,CAAiB,iBAAjB,EAAoC,gBAApC;AACD,WAFD,MAEO;AACL,YAAA,KAAK,CAAC,UAAN,CAAiB,iBAAjB,EAAoC,IAApC;AACD;AAED;AACA;;;AACQ,cAAA,uBAAA,GAAA,OAAA,CAAA,uBAAA;;AACR,cAAI,OAAO,uBAAP,KAAmC,UAAvC,EAAmD;AACjD,YAAA,uBAAuB,CAAC,KAAD,EAAQ,QAAR,CAAvB;AACD;AACF,SAzBa,CAAd;AA2BA,eAAO,QAAP;AACD,OA/BD;;AAiCA,aAAO,IAAI,CAAC,aAAD,EAAgB,YAAhB,CAAX;AArCqE,KAAA;AAsCtE,GAtCD;AAuCD;;AAED,SAAS,mBAAT","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { configureScope } from '@sentry/minimal';\nimport { Scope } from '@sentry/types';\n\ninterface Action<T = any> {\n  type: T;\n}\n\ninterface AnyAction extends Action {\n  [extraProps: string]: any;\n}\n\ntype Reducer<S = any, A extends Action = AnyAction> = (state: S | undefined, action: A) => S;\n\ntype Dispatch<A extends Action = AnyAction> = <T extends A>(action: T, ...extraArgs: any[]) => T;\n\ntype ExtendState<State, Extension> = [Extension] extends [never] ? State : State & Extension;\n\ntype Unsubscribe = () => void;\n\ninterface Store<S = any, A extends Action = AnyAction, StateExt = never, Ext = Record<string, unknown>> {\n  dispatch: Dispatch<A>;\n  getState(): S;\n  subscribe(listener: () => void): Unsubscribe;\n  replaceReducer<NewState, NewActions extends Action>(\n    nextReducer: Reducer<NewState, NewActions>,\n  ): Store<ExtendState<NewState, StateExt>, NewActions, StateExt, Ext> & Ext;\n}\n\ndeclare const $CombinedState: unique symbol;\n\ntype CombinedState<S> = { readonly [$CombinedState]?: undefined } & S;\n\ntype PreloadedState<S> = Required<S> extends {\n  [$CombinedState]: undefined;\n}\n  ? S extends CombinedState<infer S1>\n    ? { [K in keyof S1]?: S1[K] extends Record<string, unknown> ? PreloadedState<S1[K]> : S1[K] }\n    : never\n  : { [K in keyof S]: S[K] extends string | number | boolean | symbol ? S[K] : PreloadedState<S[K]> };\n\ntype StoreEnhancerStoreCreator<Ext = Record<string, unknown>, StateExt = never> = <\n  S = any,\n  A extends Action = AnyAction\n>(\n  reducer: Reducer<S, A>,\n  preloadedState?: PreloadedState<S>,\n) => Store<ExtendState<S, StateExt>, A, StateExt, Ext> & Ext;\n\nexport interface SentryEnhancerOptions<S = any> {\n  /**\n   * Transforms the state before attaching it to an event.\n   * Use this to remove any private data before sending it to Sentry.\n   * Return null to not attach the state.\n   */\n  stateTransformer(state: S | undefined): (S & any) | null;\n  /**\n   * Transforms the action before sending it as a breadcrumb.\n   * Use this to remove any private data before sending it to Sentry.\n   * Return null to not send the breadcrumb.\n   */\n  actionTransformer(action: AnyAction): AnyAction | null;\n  /**\n   * Called on every state update, configure the Sentry Scope with the redux state.\n   */\n  configureScopeWithState?(scope: Scope, state: S): void;\n}\n\nconst ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nconst ACTION_BREADCRUMB_TYPE = 'info';\nconst STATE_CONTEXT_KEY = 'redux.state';\n\nconst defaultOptions: SentryEnhancerOptions = {\n  actionTransformer: action => action,\n  stateTransformer: state => state || null,\n};\n\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\nfunction createReduxEnhancer(enhancerOptions?: Partial<SentryEnhancerOptions>): any {\n  // Note: We return an any type as to not have type conflicts.\n  const options = {\n    ...defaultOptions,\n    ...enhancerOptions,\n  };\n\n  return (next: StoreEnhancerStoreCreator): StoreEnhancerStoreCreator => <S = any, A extends Action = AnyAction>(\n    reducer: Reducer<S, A>,\n    initialState?: PreloadedState<S>,\n  ) => {\n    const sentryReducer: Reducer<S, A> = (state, action): S => {\n      const newState = reducer(state, action);\n\n      configureScope(scope => {\n        /* Action breadcrumbs */\n        const transformedAction = options.actionTransformer(action);\n        if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n          scope.addBreadcrumb({\n            category: ACTION_BREADCRUMB_CATEGORY,\n            data: transformedAction,\n            type: ACTION_BREADCRUMB_TYPE,\n          });\n        }\n\n        /* Set latest state to scope */\n        const transformedState = options.stateTransformer(newState);\n        if (typeof transformedState !== 'undefined' && transformedState !== null) {\n          scope.setContext(STATE_CONTEXT_KEY, transformedState);\n        } else {\n          scope.setContext(STATE_CONTEXT_KEY, null);\n        }\n\n        /* Allow user to configure scope with latest state */\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        const { configureScopeWithState } = options;\n        if (typeof configureScopeWithState === 'function') {\n          configureScopeWithState(scope, newState);\n        }\n      });\n\n      return newState;\n    };\n\n    return next(sentryReducer, initialState);\n  };\n}\n\nexport { createReduxEnhancer };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}