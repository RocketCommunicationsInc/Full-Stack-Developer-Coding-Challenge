{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The main LitElement module, which defines the [[`LitElement`]] base class and\n * related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import [[`LitElement`]] and [[`html`]] from this module to create a\n * component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends [[`UpdatingElement`]] and adds lit-html templating.\n * The `UpdatingElement` class is provided for users that want to build\n * their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets, unsafeCSS } from './lib/css-tag.js';\nexport * from './lib/css-tag.js'; // IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n\n(window['litElementVersions'] || (window['litElementVersions'] = [])).push('2.4.0');\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\n\nconst renderNotImplemented = {};\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the [[`properties`]] property or the [[`property`]] decorator.\n */\n\nexport class LitElement extends UpdatingElement {\n  /**\n   * Return the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * @nocollapse\n   */\n  static getStyles() {\n    return this.styles;\n  }\n  /** @nocollapse */\n\n\n  static _getUniqueStyles() {\n    // Only gather styles once per class\n    if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n      return;\n    } // Take care not to call `this.getStyles()` multiple times since this\n    // generates new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n\n\n    const userStyles = this.getStyles();\n\n    if (Array.isArray(userStyles)) {\n      // De-duplicate styles preserving the _last_ instance in the set.\n      // This is a performance optimization to avoid duplicated styles that can\n      // occur especially when composing via subclassing.\n      // The last item is kept to try to preserve the cascade order with the\n      // assumption that it's most important that last added styles override\n      // previous styles.\n      const addStyles = (styles, set) => styles.reduceRight((set, s) => // Note: On IE set.add() does not return the set\n      Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set); // Array.from does not work on Set in IE, otherwise return\n      // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n\n\n      const set = addStyles(userStyles, new Set());\n      const styles = [];\n      set.forEach(v => styles.unshift(v));\n      this._styles = styles;\n    } else {\n      this._styles = userStyles === undefined ? [] : [userStyles];\n    } // Ensure that there are no invalid CSSStyleSheet instances here. They are\n    // invalid in two conditions.\n    // (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but\n    //     this is impossible to check except via .replaceSync or use\n    // (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is\n    //     false)\n\n\n    this._styles = this._styles.map(s => {\n      if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {\n        // Flatten the cssText from the passed constructible stylesheet (or\n        // undetectable non-constructible stylesheet). The user might have\n        // expected to update their stylesheets over time, but the alternative\n        // is a crash.\n        const cssText = Array.prototype.slice.call(s.cssRules).reduce((css, rule) => css + rule.cssText, '');\n        return unsafeCSS(cssText);\n      }\n\n      return s;\n    });\n  }\n  /**\n   * Performs element initialization. By default this calls\n   * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and\n   * captures any pre-set values for registered properties.\n   */\n\n\n  initialize() {\n    super.initialize();\n\n    this.constructor._getUniqueStyles();\n\n    this.renderRoot = this.createRenderRoot(); // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n\n\n  createRenderRoot() {\n    return this.attachShadow({\n      mode: 'open'\n    });\n  }\n  /**\n   * Applies styling to the element shadowRoot using the [[`styles`]]\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n\n\n  adoptStyles() {\n    const styles = this.constructor._styles;\n\n    if (styles.length === 0) {\n      return;\n    } // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n\n\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map(s => s.cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      this.renderRoot.adoptedStyleSheets = styles.map(s => s instanceof CSSStyleSheet ? s : s.styleSheet);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback(); // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param _changedProperties Map of changed properties with old values\n   */\n\n\n  update(changedProperties) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const templateResult = this.render();\n    super.update(changedProperties); // If render is not implemented by the component, don't call lit-html render\n\n    if (templateResult !== renderNotImplemented) {\n      this.constructor.render(templateResult, this.renderRoot, {\n        scopeName: this.localName,\n        eventContext: this\n      });\n    } // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n\n\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n\n      this.constructor._styles.forEach(s => {\n        const style = document.createElement('style');\n        style.textContent = s.cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `NodePart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   */\n\n\n  render() {\n    return renderNotImplemented;\n  }\n\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\n\nLitElement['finalized'] = true;\n/**\n * Reference to the underlying library method used to render the element's\n * DOM. By default, points to the `render` method from lit-html's shady-render\n * module.\n *\n * **Most users will never need to touch this property.**\n *\n * This  property should not be confused with the `render` instance method,\n * which should be overridden to define a template for the element.\n *\n * Advanced users creating a new base class based on LitElement can override\n * this property to point to a custom render method with a signature that\n * matches [shady-render's `render`\n * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).\n *\n * @nocollapse\n */\n\nLitElement.render = render;","map":{"version":3,"sources":["src/lit-element.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The main LitElement module, which defines the [[`LitElement`]] base class and\n * related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import [[`LitElement`]] and [[`html`]] from this module to create a\n * component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends [[`UpdatingElement`]] and adds lit-html templating.\n * The `UpdatingElement` class is provided for users that want to build\n * their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {render, ShadyRenderOptions} from 'lit-html/lib/shady-render.js';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg, TemplateResult, SVGTemplateResult} from 'lit-html/lit-html.js';\nimport {supportsAdoptingStyleSheets, CSSResult, unsafeCSS} from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.4.0');\n\nexport type CSSResultOrNative = CSSResult|CSSStyleSheet;\n\nexport interface CSSResultArray extends\n    Array<CSSResultOrNative|CSSResultArray> {}\n\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the [[`properties`]] property or the [[`property`]] decorator.\n */\nexport class LitElement extends UpdatingElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See updating-element.ts for more information.\n   */\n  protected static['finalized'] = true;\n\n  /**\n   * Reference to the underlying library method used to render the element's\n   * DOM. By default, points to the `render` method from lit-html's shady-render\n   * module.\n   *\n   * **Most users will never need to touch this property.**\n   *\n   * This  property should not be confused with the `render` instance method,\n   * which should be overridden to define a template for the element.\n   *\n   * Advanced users creating a new base class based on LitElement can override\n   * this property to point to a custom render method with a signature that\n   * matches [shady-render's `render`\n   * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).\n   *\n   * @nocollapse\n   */\n  static render:\n      (result: unknown, container: Element|DocumentFragment,\n       options: ShadyRenderOptions) => void = render;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the [[`css`]] tag function or via constructible stylesheets.\n   */\n  static styles?: CSSResultOrNative|CSSResultArray;\n\n  private static _styles: Array<CSSResultOrNative|CSSResult>|undefined;\n\n  /**\n   * Return the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * @nocollapse\n   */\n  static getStyles(): CSSResultOrNative|CSSResultArray|undefined {\n    return this.styles;\n  }\n\n  /** @nocollapse */\n  private static _getUniqueStyles() {\n    // Only gather styles once per class\n    if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n      return;\n    }\n    // Take care not to call `this.getStyles()` multiple times since this\n    // generates new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n    const userStyles = this.getStyles();\n\n    if (Array.isArray(userStyles)) {\n      // De-duplicate styles preserving the _last_ instance in the set.\n      // This is a performance optimization to avoid duplicated styles that can\n      // occur especially when composing via subclassing.\n      // The last item is kept to try to preserve the cascade order with the\n      // assumption that it's most important that last added styles override\n      // previous styles.\n      const addStyles = (styles: CSSResultArray, set: Set<CSSResultOrNative>):\n          Set<CSSResultOrNative> => styles.reduceRight(\n              (set: Set<CSSResultOrNative>, s) =>\n                  // Note: On IE set.add() does not return the set\n              Array.isArray(s) ? addStyles(s, set) : (set.add(s), set),\n              set);\n      // Array.from does not work on Set in IE, otherwise return\n      // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n      const set = addStyles(userStyles, new Set<CSSResultOrNative>());\n      const styles: CSSResultOrNative[] = [];\n      set.forEach((v) => styles.unshift(v));\n      this._styles = styles;\n    } else {\n      this._styles = userStyles === undefined ? [] : [userStyles];\n    }\n\n    // Ensure that there are no invalid CSSStyleSheet instances here. They are\n    // invalid in two conditions.\n    // (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but\n    //     this is impossible to check except via .replaceSync or use\n    // (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is\n    //     false)\n    this._styles = this._styles.map((s) => {\n      if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {\n        // Flatten the cssText from the passed constructible stylesheet (or\n        // undetectable non-constructible stylesheet). The user might have\n        // expected to update their stylesheets over time, but the alternative\n        // is a crash.\n        const cssText = Array.prototype.slice.call(s.cssRules)\n                            .reduce((css, rule) => css + rule.cssText, '');\n        return unsafeCSS(cssText);\n      }\n      return s;\n    });\n  }\n\n  private _needsShimAdoptedStyleSheets?: boolean;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  readonly renderRoot!: Element|DocumentFragment;\n\n  /**\n   * Performs element initialization. By default this calls\n   * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and\n   * captures any pre-set values for registered properties.\n   */\n  protected initialize() {\n    super.initialize();\n    (this.constructor as typeof LitElement)._getUniqueStyles();\n    (this as {\n      renderRoot: Element|DocumentFragment;\n    }).renderRoot = this.createRenderRoot();\n    // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode: 'open'});\n  }\n\n  /**\n   * Applies styling to the element shadowRoot using the [[`styles`]]\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n  protected adoptStyles() {\n    const styles = (this.constructor as typeof LitElement)._styles!;\n    if (styles.length === 0) {\n      return;\n    }\n    // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim!.prepareAdoptedCssText(\n          styles.map((s) => s.cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      (this.renderRoot as ShadowRoot).adoptedStyleSheets =\n          styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet!);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const templateResult = this.render();\n    super.update(changedProperties);\n    // If render is not implemented by the component, don't call lit-html render\n    if (templateResult !== renderNotImplemented) {\n      (this.constructor as typeof LitElement)\n          .render(\n              templateResult,\n              this.renderRoot,\n              {scopeName: this.localName, eventContext: this});\n    }\n    // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n      (this.constructor as typeof LitElement)._styles!.forEach((s) => {\n        const style = document.createElement('style');\n        style.textContent = s.cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `NodePart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   */\n  protected render(): unknown {\n    return renderNotImplemented;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}