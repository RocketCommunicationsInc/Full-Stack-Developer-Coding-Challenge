{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { BaseBackend } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\n\nvar BrowserBackend =\n/** @class */\nfunction (_super) {\n  __extends(BrowserBackend, _super);\n\n  function BrowserBackend() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype.eventFromException = function (exception, hint) {\n    return eventFromException(this._options, exception, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {\n    if (level === void 0) {\n      level = Severity.Info;\n    }\n\n    return eventFromMessage(this._options, message, level, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype._setupTransport = function () {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return _super.prototype._setupTransport.call(this);\n    }\n\n    var transportOptions = __assign(__assign({}, this._options.transportOptions), {\n      dsn: this._options.dsn,\n      _metadata: this._options._metadata\n    });\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n\n    return new XHRTransport(transportOptions);\n  };\n\n  return BrowserBackend;\n}(BaseBackend);\n\nexport { BrowserBackend };","map":{"version":3,"sources":["../src/backend.ts"],"names":[],"mappings":";AAAA,SAAS,WAAT,QAA4B,cAA5B;AACA,SAAoC,QAApC,QAA+D,eAA/D;AACA,SAAS,aAAT,QAA8B,eAA9B;AAEA,SAAS,kBAAT,EAA6B,gBAA7B,QAAqD,gBAArD;AACA,SAAS,cAAT,EAAyB,YAAzB,QAA6C,cAA7C;AAkCA;;;AAGG;;AACH,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;;AAApC,WAAA,cAAA,GAAA;;AAqCC;AApCC;;AAEG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,SAA1B,EAA8C,IAA9C,EAA8D;AAC5D,WAAO,kBAAkB,CAAC,KAAK,QAAN,EAAgB,SAAhB,EAA2B,IAA3B,CAAzB;AACD,GAFM;AAGP;;AAEG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,OAAxB,EAAyC,KAAzC,EAA0E,IAA1E,EAA0F;AAAjD,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAkB,QAAQ,CAAC,IAA3B;AAA+B;;AACtE,WAAO,gBAAgB,CAAC,KAAK,QAAN,EAAgB,OAAhB,EAAyB,KAAzB,EAAgC,IAAhC,CAAvB;AACD,GAFM;AAIP;;AAEG;;;AACO,EAAA,cAAA,CAAA,SAAA,CAAA,eAAA,GAAV,YAAA;AACE,QAAI,CAAC,KAAK,QAAL,CAAc,GAAnB,EAAwB;AACtB;AACA,aAAO,MAAA,CAAA,SAAA,CAAM,eAAN,CAAqB,IAArB,CAAqB,IAArB,CAAP;AACD;;AAED,QAAM,gBAAgB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACjB,KAAK,QAAL,CAAc,gBADG,CAAA,EACa;AACjC,MAAA,GAAG,EAAE,KAAK,QAAL,CAAc,GADc;AAEjC,MAAA,SAAS,EAAE,KAAK,QAAL,CAAc;AAFQ,KADb,CAAtB;;AAMA,QAAI,KAAK,QAAL,CAAc,SAAlB,EAA6B;AAC3B,aAAO,IAAI,KAAK,QAAL,CAAc,SAAlB,CAA4B,gBAA5B,CAAP;AACD;;AACD,QAAI,aAAa,EAAjB,EAAqB;AACnB,aAAO,IAAI,cAAJ,CAAmB,gBAAnB,CAAP;AACD;;AACD,WAAO,IAAI,YAAJ,CAAiB,gBAAjB,CAAP;AACD,GAnBS;;AAoBZ,SAAA,cAAA;AAAC,CArCD,CAAoC,WAApC,CAAA","sourcesContent":["import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n\n  /**\n   * A flag enabling Sessions Tracking feature.\n   * By default Sessions Tracking is disabled.\n   */\n  autoSessionTracking?: boolean;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options, exception, hint);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(this._options, message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n      _metadata: this._options._metadata,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}