{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { isInstanceOf } from '@sentry/utils';\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\n\nvar LinkedErrors =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function LinkedErrors(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = LinkedErrors.id;\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype.setupOnce = function () {\n    addGlobalEventProcessor(function (event, hint) {\n      var self = getCurrentHub().getIntegration(LinkedErrors);\n\n      if (self) {\n        return self._handler(event, hint);\n      }\n\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype._handler = function (event, hint) {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n\n    var linkedErrors = this._walkErrorTree(hint.originalException, this._key);\n\n    event.exception.values = __spread(linkedErrors, event.exception.values);\n    return event;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype._walkErrorTree = function (error, key, stack) {\n    if (stack === void 0) {\n      stack = [];\n    }\n\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n\n    var stacktrace = computeStackTrace(error[key]);\n    var exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, __spread([exception], stack));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.id = 'LinkedErrors';\n  return LinkedErrors;\n}();\n\nexport { LinkedErrors };","map":{"version":3,"sources":["../../src/integrations/linkederrors.ts"],"names":[],"mappings":";AAAA,SAAS,uBAAT,EAAkC,aAAlC,QAAuD,cAAvD;AAEA,SAAS,YAAT,QAA6B,eAA7B;AAEA,SAAS,uBAAT,QAAwC,YAAxC;AACA,SAAS,iBAAT,QAAkC,aAAlC;AAEA,IAAM,WAAW,GAAG,OAApB;AACA,IAAM,aAAa,GAAG,CAAtB;AAEA;;AACA,IAAA,YAAA;AAAA;AAAA,YAAA;AAqBE;;AAEG;AACH,WAAA,YAAA,CAAmB,OAAnB,EAAiE;AAA9C,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA8C;AAlBjE;;AAEG;;;AACa,SAAA,IAAA,GAAe,YAAY,CAAC,EAA5B;AAgBd,SAAK,IAAL,GAAY,OAAO,CAAC,GAAR,IAAe,WAA3B;AACA,SAAK,MAAL,GAAc,OAAO,CAAC,KAAR,IAAiB,aAA/B;AACD;AAED;;AAEG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,IAAA,uBAAuB,CAAC,UAAC,KAAD,EAAe,IAAf,EAA+B;AACrD,UAAM,IAAI,GAAG,aAAa,GAAG,cAAhB,CAA+B,YAA/B,CAAb;;AACA,UAAI,IAAJ,EAAU;AACR,eAAO,IAAI,CAAC,QAAL,CAAc,KAAd,EAAqB,IAArB,CAAP;AACD;;AACD,aAAO,KAAP;AACD,KANsB,CAAvB;AAOD,GARM;AAUP;;AAEG;;;AACK,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAR,UAAiB,KAAjB,EAA+B,IAA/B,EAA+C;AAC7C,QAAI,CAAC,KAAK,CAAC,SAAP,IAAoB,CAAC,KAAK,CAAC,SAAN,CAAgB,MAArC,IAA+C,CAAC,IAAhD,IAAwD,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAN,EAAyB,KAAzB,CAAzE,EAA0G;AACxG,aAAO,KAAP;AACD;;AACD,QAAM,YAAY,GAAG,KAAK,cAAL,CAAoB,IAAI,CAAC,iBAAzB,EAA6D,KAAK,IAAlE,CAArB;;AACA,IAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAsB,QAAA,CAAO,YAAP,EAAwB,KAAK,CAAC,SAAN,CAAgB,MAAxC,CAAtB;AACA,WAAO,KAAP;AACD,GAPO;AASR;;AAEG;;;AACK,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAR,UAAuB,KAAvB,EAA6C,GAA7C,EAA0D,KAA1D,EAAiF;AAAvB,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,EAAA;AAAuB;;AAC/E,QAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAD,CAAN,EAAa,KAAb,CAAb,IAAoC,KAAK,CAAC,MAAN,GAAe,CAAf,IAAoB,KAAK,MAAjE,EAAyE;AACvE,aAAO,KAAP;AACD;;AACD,QAAM,UAAU,GAAG,iBAAiB,CAAC,KAAK,CAAC,GAAD,CAAN,CAApC;AACA,QAAM,SAAS,GAAG,uBAAuB,CAAC,UAAD,CAAzC;AACA,WAAO,KAAK,cAAL,CAAoB,KAAK,CAAC,GAAD,CAAzB,EAAgC,GAAhC,EAAmC,QAAA,CAAA,CAAG,SAAH,CAAA,EAAiB,KAAjB,CAAnC,CAAP;AACD,GAPO;AAxDR;;AAEG;;;AACW,EAAA,YAAA,CAAA,EAAA,GAAa,cAAb;AA6DhB,SAAA,YAAA;AAAC,CAjED,EAAA;;SAAa,Y","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        return self._handler(event, hint);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): Event | null {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n    const linkedErrors = this._walkErrorTree(hint.originalException as ExtendedError, this._key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n    const stacktrace = computeStackTrace(error[key]);\n    const exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}