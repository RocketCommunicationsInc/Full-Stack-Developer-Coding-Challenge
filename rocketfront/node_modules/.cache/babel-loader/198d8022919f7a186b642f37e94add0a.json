{"ast":null,"code":"import { LOGOUT } from \"../actionTypes\";\nimport { AUTH_SUCCESS } from \"../actionTypes\";\nimport axios from \"axios\";\nexport const signup = userData => {\n  return dispatch => {\n    fetch(\"http://localhost:3001/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify({\n        user: userData\n      })\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: AUTH_SUCCESS,\n        payload: {\n          loggedIn: true,\n          currentUser: data.user\n        }\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n};\nexport const login = userData => {\n  return dispatch => {\n    fetch(\"http://localhost:3001/users/show\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify(userData)\n    }).then(resp => resp.json()).then(data => {\n      dispatch({\n        type: AUTH_SUCCESS,\n        payload: {\n          loggedIn: true,\n          currentUser: data.user\n        }\n      });\n    });\n  };\n};\nexport const checkLoggedIn = () => {\n  return dispatch => {\n    fetch(`http://localhost:3001/logged_in`, {\n      credentials: \"include\"\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: AUTH_SUCCESS,\n        payload: {\n          loggedIn: data.logged_in,\n          currentUser: data.user\n        }\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n};\nexport const logout = () => {\n  return dispatch => {\n    dispatch({\n      type: LOGOUT,\n      payload: {\n        loggedIn: false,\n        currentUser: {}\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/src/redux/actions/UsersActions.js"],"names":["LOGOUT","AUTH_SUCCESS","axios","signup","userData","dispatch","fetch","method","headers","credentials","body","JSON","stringify","user","then","res","json","data","type","payload","loggedIn","currentUser","catch","error","login","resp","checkLoggedIn","logged_in","logout"],"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,MAAM,GAAIC,QAAD,IAAc;AACnC,SAAQC,QAAD,IAAc;AACpBC,IAAAA,KAAK,CAAC,6BAAD,EAAgC;AACpCC,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR,OAF2B;AAKpCC,MAAAA,WAAW,EAAE,SALuB;AAMpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,IAAI,EAAET;AAAR,OAAf;AAN8B,KAAhC,CAAL,CAQEU,IARF,CAQQC,GAAD,IAASA,GAAG,CAACC,IAAJ,EARhB,EASEF,IATF,CASQG,IAAD,IAAU;AACfZ,MAAAA,QAAQ,CAAC;AACRa,QAAAA,IAAI,EAAEjB,YADE;AAERkB,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,IADF;AAERC,UAAAA,WAAW,EAAEJ,IAAI,CAACJ;AAFV;AAFD,OAAD,CAAR;AAOA,KAjBF,EAkBES,KAlBF,CAkBSC,KAAD,IAAW;AACjB,YAAMA,KAAN;AACA,KApBF;AAqBA,GAtBD;AAuBA,CAxBM;AA0BP,OAAO,MAAMC,KAAK,GAAIpB,QAAD,IAAc;AAClC,SAAQC,QAAD,IAAc;AACpBC,IAAAA,KAAK,CAAC,kCAAD,EAAqC;AACzCC,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR,OAFgC;AAKzCC,MAAAA,WAAW,EAAE,SAL4B;AAMzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,QAAf;AANmC,KAArC,CAAL,CAQEU,IARF,CAQQW,IAAD,IAAUA,IAAI,CAACT,IAAL,EARjB,EASEF,IATF,CASQG,IAAD,IAAU;AACfZ,MAAAA,QAAQ,CAAC;AACRa,QAAAA,IAAI,EAAEjB,YADE;AAERkB,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,IADF;AAERC,UAAAA,WAAW,EAAEJ,IAAI,CAACJ;AAFV;AAFD,OAAD,CAAR;AAOA,KAjBF;AAkBA,GAnBD;AAoBA,CArBM;AAuBP,OAAO,MAAMa,aAAa,GAAG,MAAM;AAClC,SAAQrB,QAAD,IAAc;AACpBC,IAAAA,KAAK,CAAE,iCAAF,EAAoC;AACxCG,MAAAA,WAAW,EAAE;AAD2B,KAApC,CAAL,CAGEK,IAHF,CAGQC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHhB,EAKEF,IALF,CAKQG,IAAD,IAAU;AACfZ,MAAAA,QAAQ,CAAC;AACRa,QAAAA,IAAI,EAAEjB,YADE;AAERkB,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAEH,IAAI,CAACU,SADP;AAERN,UAAAA,WAAW,EAAEJ,IAAI,CAACJ;AAFV;AAFD,OAAD,CAAR;AAOA,KAbF,EAcES,KAdF,CAcSC,KAAD,IAAW;AACjB,YAAMA,KAAN;AACA,KAhBF;AAiBA,GAlBD;AAmBA,CApBM;AAsBP,OAAO,MAAMK,MAAM,GAAG,MAAM;AAC3B,SAAQvB,QAAD,IAAc;AACpBA,IAAAA,QAAQ,CAAC;AACRa,MAAAA,IAAI,EAAElB,MADE;AAERmB,MAAAA,OAAO,EAAE;AACRC,QAAAA,QAAQ,EAAE,KADF;AAERC,QAAAA,WAAW,EAAE;AAFL;AAFD,KAAD,CAAR;AAOA,GARD;AASA,CAVM","sourcesContent":["import { LOGOUT } from \"../actionTypes\";\nimport { AUTH_SUCCESS } from \"../actionTypes\";\nimport axios from \"axios\";\n\nexport const signup = (userData) => {\n\treturn (dispatch) => {\n\t\tfetch(\"http://localhost:3001/users\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tcredentials: \"include\",\n\t\t\tbody: JSON.stringify({ user: userData }),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: AUTH_SUCCESS,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tloggedIn: true,\n\t\t\t\t\t\tcurrentUser: data.user,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthrow error;\n\t\t\t});\n\t};\n};\n\nexport const login = (userData) => {\n\treturn (dispatch) => {\n\t\tfetch(\"http://localhost:3001/users/show\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tcredentials: \"include\",\n\t\t\tbody: JSON.stringify(userData),\n\t\t})\n\t\t\t.then((resp) => resp.json())\n\t\t\t.then((data) => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: AUTH_SUCCESS,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tloggedIn: true,\n\t\t\t\t\t\tcurrentUser: data.user,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\t};\n};\n\nexport const checkLoggedIn = () => {\n\treturn (dispatch) => {\n\t\tfetch(`http://localhost:3001/logged_in`, {\n\t\t\tcredentials: \"include\",\n\t\t})\n\t\t\t.then((res) => res.json())\n\n\t\t\t.then((data) => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: AUTH_SUCCESS,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tloggedIn: data.logged_in,\n\t\t\t\t\t\tcurrentUser: data.user,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthrow error;\n\t\t\t});\n\t};\n};\n\nexport const logout = () => {\n\treturn (dispatch) => {\n\t\tdispatch({\n\t\t\ttype: LOGOUT,\n\t\t\tpayload: {\n\t\t\t\tloggedIn: false,\n\t\t\t\tcurrentUser: {},\n\t\t\t},\n\t\t});\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}