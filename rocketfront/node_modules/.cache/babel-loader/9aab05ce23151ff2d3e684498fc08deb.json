{"ast":null,"code":"/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\nexport default function tzTokenizeDate(date, timeZone) {\n  var dtf = getDateTimeFormat(timeZone);\n  return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);\n}\nvar typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction partsOffset(dtf, date) {\n  var formatted = dtf.formatToParts(date);\n  var filled = [];\n\n  for (var i = 0; i < formatted.length; i++) {\n    var pos = typeToPos[formatted[i].type];\n\n    if (pos >= 0) {\n      filled[pos] = parseInt(formatted[i].value, 10);\n    }\n  }\n\n  return filled;\n}\n\nfunction hackyOffset(dtf, date) {\n  var formatted = dtf.format(date).replace(/\\u200E/g, '');\n  var parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted); // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n  // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n\n  return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]];\n} // Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\n\n\nvar dtfCache = {};\n\nfunction getDateTimeFormat(timeZone) {\n  if (!dtfCache[timeZone]) {\n    // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\n    var testDateFormatted = new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: 'America/New_York',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }).format(new Date('2014-06-25T04:00:00.123Z'));\n    var hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' || testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';\n    dtfCache[timeZone] = hourCycleSupported ? new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: timeZone,\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }) : new Intl.DateTimeFormat('en-US', {\n      hourCycle: 'h23',\n      timeZone: timeZone,\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  }\n\n  return dtfCache[timeZone];\n}","map":{"version":3,"sources":["/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/node_modules/date-fns-tz/esm/_lib/tzTokenizeDate/index.js"],"names":["tzTokenizeDate","date","timeZone","dtf","getDateTimeFormat","formatToParts","partsOffset","hackyOffset","typeToPos","year","month","day","hour","minute","second","formatted","filled","i","length","pos","type","parseInt","value","format","replace","parsed","exec","dtfCache","testDateFormatted","Intl","DateTimeFormat","hour12","Date","hourCycleSupported","hourCycle"],"mappings":"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","sourcesContent":["/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\nexport default function tzTokenizeDate(date, timeZone) {\n  var dtf = getDateTimeFormat(timeZone)\n  return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date)\n}\n\nvar typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5,\n}\n\nfunction partsOffset(dtf, date) {\n  var formatted = dtf.formatToParts(date)\n  var filled = []\n  for (var i = 0; i < formatted.length; i++) {\n    var pos = typeToPos[formatted[i].type]\n\n    if (pos >= 0) {\n      filled[pos] = parseInt(formatted[i].value, 10)\n    }\n  }\n  return filled\n}\n\nfunction hackyOffset(dtf, date) {\n  var formatted = dtf.format(date).replace(/\\u200E/g, '')\n  var parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted)\n  // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n  // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n  return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]]\n}\n\n// Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\nvar dtfCache = {}\nfunction getDateTimeFormat(timeZone) {\n  if (!dtfCache[timeZone]) {\n    // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\n    var testDateFormatted = new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: 'America/New_York',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    }).format(new Date('2014-06-25T04:00:00.123Z'))\n    var hourCycleSupported =\n      testDateFormatted === '06/25/2014, 00:00:00' ||\n      testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00'\n\n    dtfCache[timeZone] = hourCycleSupported\n      ? new Intl.DateTimeFormat('en-US', {\n          hour12: false,\n          timeZone: timeZone,\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n        })\n      : new Intl.DateTimeFormat('en-US', {\n          hourCycle: 'h23',\n          timeZone: timeZone,\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n        })\n  }\n  return dtfCache[timeZone]\n}\n"]},"metadata":{},"sourceType":"module"}