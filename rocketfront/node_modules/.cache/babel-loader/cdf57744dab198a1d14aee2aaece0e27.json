{"ast":null,"code":"import cloneObject from 'date-fns/esm/_lib/cloneObject';\nimport format from 'date-fns/esm/format';\nimport toDate from '../toDate';\n/**\n * @name zonedTimeToUtc\n * @category Time Zone Helpers\n * @summary Get the UTC date/time from a date representing local time in a given time zone\n *\n * @description\n * Returns a date instance with the UTC time of the provided date of which the values\n * represented the local time in the time zone specified. In other words, if the input\n * date represented local time in time time zone, the timestamp of the output date will\n * give the equivalent UTC of that local time regardless of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with values representing the local time\n * @param {String} timeZone - the time zone of this local time, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am in Los Angeles is 5pm UTC\n * const result = zonedTimeToUtc(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')\n * //=> 2014-06-25T17:00:00.000Z\n */\n\nexport default function zonedTimeToUtc(date, timeZone, options) {\n  if (date instanceof Date) {\n    date = format(date, \"yyyy-MM-dd'T'HH:mm:ss.SSS\");\n  }\n\n  var extendedOptions = cloneObject(options);\n  extendedOptions.timeZone = timeZone;\n  return toDate(date, extendedOptions);\n}","map":{"version":3,"sources":["/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/node_modules/date-fns-tz/esm/zonedTimeToUtc/index.js"],"names":["cloneObject","format","toDate","zonedTimeToUtc","date","timeZone","options","Date","extendedOptions"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,EAAiD;AAC9D,MAAIF,IAAI,YAAYG,IAApB,EAA0B;AACxBH,IAAAA,IAAI,GAAGH,MAAM,CAACG,IAAD,EAAO,2BAAP,CAAb;AACD;;AACD,MAAII,eAAe,GAAGR,WAAW,CAACM,OAAD,CAAjC;AACAE,EAAAA,eAAe,CAACH,QAAhB,GAA2BA,QAA3B;AACA,SAAOH,MAAM,CAACE,IAAD,EAAOI,eAAP,CAAb;AACD","sourcesContent":["import cloneObject from 'date-fns/esm/_lib/cloneObject'\nimport format from 'date-fns/esm/format'\nimport toDate from '../toDate'\n\n/**\n * @name zonedTimeToUtc\n * @category Time Zone Helpers\n * @summary Get the UTC date/time from a date representing local time in a given time zone\n *\n * @description\n * Returns a date instance with the UTC time of the provided date of which the values\n * represented the local time in the time zone specified. In other words, if the input\n * date represented local time in time time zone, the timestamp of the output date will\n * give the equivalent UTC of that local time regardless of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with values representing the local time\n * @param {String} timeZone - the time zone of this local time, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am in Los Angeles is 5pm UTC\n * const result = zonedTimeToUtc(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')\n * //=> 2014-06-25T17:00:00.000Z\n */\nexport default function zonedTimeToUtc(date, timeZone, options) {\n  if (date instanceof Date) {\n    date = format(date, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\n  }\n  var extendedOptions = cloneObject(options)\n  extendedOptions.timeZone = timeZone\n  return toDate(date, extendedOptions)\n}\n"]},"metadata":{},"sourceType":"module"}