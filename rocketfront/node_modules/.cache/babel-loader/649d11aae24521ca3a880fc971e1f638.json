{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable max-lines */\n\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addInstrumentationHandler, getEventDescription, getGlobalObject, htmlTreeAsString, parseUrl, safeJoin } from '@sentry/utils';\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\n\nvar Breadcrumbs =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Breadcrumbs(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = Breadcrumbs.id;\n    this._options = __assign({\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n    }, options);\n  }\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n\n\n  Breadcrumbs.prototype.addSentryBreadcrumb = function (event) {\n    if (!this._options.sentry) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: \"sentry.\" + (event.type === 'transaction' ? 'transaction' : 'event'),\n      event_id: event.event_id,\n      level: event.level,\n      message: getEventDescription(event)\n    }, {\n      event: event\n    });\n  };\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n\n\n  Breadcrumbs.prototype.setupOnce = function () {\n    var _this = this;\n\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          _this._consoleBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'console'\n      });\n    }\n\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          _this._domBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'dom'\n      });\n    }\n\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          _this._xhrBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'xhr'\n      });\n    }\n\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          _this._fetchBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'fetch'\n      });\n    }\n\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          _this._historyBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'history'\n      });\n    }\n  };\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Breadcrumbs.prototype._consoleBreadcrumb = function (handlerData) {\n    var breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console'\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' ')\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = \"Assertion failed: \" + (safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level\n    });\n  };\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Breadcrumbs.prototype._domBreadcrumb = function (handlerData) {\n    var target; // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n\n    try {\n      target = handlerData.event.target ? htmlTreeAsString(handlerData.event.target) : htmlTreeAsString(handlerData.event);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: \"ui.\" + handlerData.name,\n      message: target\n    }, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global\n    });\n  };\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Breadcrumbs.prototype._xhrBreadcrumb = function (handlerData) {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      var _a = handlerData.xhr.__sentry_xhr__ || {},\n          method = _a.method,\n          url = _a.url,\n          status_code = _a.status_code,\n          body = _a.body;\n\n      getCurrentHub().addBreadcrumb({\n        category: 'xhr',\n        data: {\n          method: method,\n          url: url,\n          status_code: status_code\n        },\n        type: 'http'\n      }, {\n        xhr: handlerData.xhr,\n        input: body\n      });\n      return;\n    }\n  };\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Breadcrumbs.prototype._fetchBreadcrumb = function (handlerData) {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb({\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: Severity.Error,\n        type: 'http'\n      }, {\n        data: handlerData.error,\n        input: handlerData.args\n      });\n    } else {\n      getCurrentHub().addBreadcrumb({\n        category: 'fetch',\n        data: __assign(__assign({}, handlerData.fetchData), {\n          status_code: handlerData.response.status\n        }),\n        type: 'http'\n      }, {\n        input: handlerData.args,\n        response: handlerData.response\n      });\n    }\n  };\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Breadcrumbs.prototype._historyBreadcrumb = function (handlerData) {\n    var global = getGlobalObject();\n    var from = handlerData.from;\n    var to = handlerData.to;\n    var parsedLoc = parseUrl(global.location.href);\n    var parsedFrom = parseUrl(from);\n    var parsedTo = parseUrl(to); // Initial pushState doesn't provide `from` information\n\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    } // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n\n\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from: from,\n        to: to\n      }\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Breadcrumbs.id = 'Breadcrumbs';\n  return Breadcrumbs;\n}();\n\nexport { Breadcrumbs };","map":{"version":3,"sources":["../../src/integrations/breadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean;\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._consoleBreadcrumb(...args);\n        },\n        type: 'console',\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._domBreadcrumb(...args);\n        },\n        type: 'dom',\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._xhrBreadcrumb(...args);\n        },\n        type: 'xhr',\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._fetchBreadcrumb(...args);\n        },\n        type: 'fetch',\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._historyBreadcrumb(...args);\n        },\n        type: 'history',\n      });\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  }\n\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node)\n        : htmlTreeAsString((handlerData.event as unknown) as Node);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'xhr',\n          data: {\n            method,\n            url,\n            status_code,\n          },\n          type: 'http',\n        },\n        {\n          xhr: handlerData.xhr,\n          input: body,\n        },\n      );\n\n      return;\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: handlerData.fetchData,\n          level: Severity.Error,\n          type: 'http',\n        },\n        {\n          data: handlerData.error,\n          input: handlerData.args,\n        },\n      );\n    } else {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: {\n            ...handlerData.fetchData,\n            status_code: handlerData.response.status,\n          },\n          type: 'http',\n        },\n        {\n          input: handlerData.args,\n          response: handlerData.response,\n        },\n      );\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n    const global = getGlobalObject<Window>();\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(global.location.href);\n    let parsedFrom = parseUrl(from);\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}