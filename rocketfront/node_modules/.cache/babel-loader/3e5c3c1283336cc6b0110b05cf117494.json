{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\nvar global = getGlobalObject();\n/** UserAgent */\n\nvar UserAgent =\n/** @class */\nfunction () {\n  function UserAgent() {\n    /**\n     * @inheritDoc\n     */\n    this.name = UserAgent.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  UserAgent.prototype.setupOnce = function () {\n    addGlobalEventProcessor(function (event) {\n      var _a, _b, _c;\n\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        } // grab as much info as exists and add it to the event\n\n\n        var url = ((_a = event.request) === null || _a === void 0 ? void 0 : _a.url) || ((_b = global.location) === null || _b === void 0 ? void 0 : _b.href);\n        var referrer = (global.document || {}).referrer;\n        var userAgent = (global.navigator || {}).userAgent;\n\n        var headers = __assign(__assign(__assign({}, (_c = event.request) === null || _c === void 0 ? void 0 : _c.headers), referrer && {\n          Referer: referrer\n        }), userAgent && {\n          'User-Agent': userAgent\n        });\n\n        var request = __assign(__assign({}, url && {\n          url: url\n        }), {\n          headers: headers\n        });\n\n        return __assign(__assign({}, event), {\n          request: request\n        });\n      }\n\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  UserAgent.id = 'UserAgent';\n  return UserAgent;\n}();\n\nexport { UserAgent };","map":{"version":3,"sources":["../../src/integrations/useragent.ts"],"names":[],"mappings":";AAAA,SAAS,uBAAT,EAAkC,aAAlC,QAAuD,cAAvD;AAEA,SAAS,eAAT,QAAgC,eAAhC;AAEA,IAAM,MAAM,GAAG,eAAe,EAA9B;AAEA;;AACA,IAAA,SAAA;AAAA;AAAA,YAAA;AAAA,WAAA,SAAA,GAAA;AAME;;AAEG;AACI,SAAA,IAAA,GAAe,SAAS,CAAC,EAAzB;AA8BR;AA5BC;;AAEG;;;AACI,EAAA,SAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,IAAA,uBAAuB,CAAC,UAAC,KAAD,EAAa;;;AACnC,UAAI,aAAa,GAAG,cAAhB,CAA+B,SAA/B,CAAJ,EAA+C;AAC7C;AACA,YAAI,CAAC,MAAM,CAAC,SAAR,IAAqB,CAAC,MAAM,CAAC,QAA7B,IAAyC,CAAC,MAAM,CAAC,QAArD,EAA+D;AAC7D,iBAAO,KAAP;AACD,SAJ4C,CAM7C;;;AACA,YAAM,GAAG,GAAG,CAAA,CAAA,EAAA,GAAA,KAAK,CAAC,OAAN,MAAa,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAa,EAAA,CAAE,GAAf,MAAkB,CAAA,EAAA,GAAI,MAAM,CAAC,QAAX,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAE,IAAvC,CAAZ;AACQ,YAAA,QAAA,GAAA,CAAA,MAAA,CAAA,QAAA,IAAA,EAAA,EAAA,QAAA;AACA,YAAA,SAAA,GAAA,CAAA,MAAA,CAAA,SAAA,IAAA,EAAA,EAAA,SAAA;;AAER,YAAM,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAA,CAAA,EAAA,GACR,KAAK,CAAC,OADE,MACK,IADL,IACK,EAAA,KAAA,KAAA,CADL,GACK,KAAA,CADL,GACK,EAAA,CAAE,OADP,CAAA,EAEP,QAAQ,IAAI;AAAE,UAAA,OAAO,EAAE;AAAX,SAFL,CAAA,EAGP,SAAS,IAAI;AAAE,wBAAc;AAAhB,SAHN,CAAb;;AAKA,YAAM,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAS,GAAG,IAAI;AAAE,UAAA,GAAG,EAAA;AAAL,SAAhB,CAAA,EAAwB;AAAE,UAAA,OAAO,EAAA;AAAT,SAAxB,CAAb;;AAEA,eAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAY,KAAZ,CAAA,EAAiB;AAAE,UAAA,OAAO,EAAA;AAAT,SAAjB,CAAA;AACD;;AACD,aAAO,KAAP;AACD,KAtBsB,CAAvB;AAuBD,GAxBM;AAbP;;AAEG;;;AACW,EAAA,SAAA,CAAA,EAAA,GAAa,WAAb;AAmChB,SAAA,SAAA;AAAC,CAvCD,EAAA;;SAAa,S","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = event.request?.url || global.location?.href;\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...event.request?.headers,\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}