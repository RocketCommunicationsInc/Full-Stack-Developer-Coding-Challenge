{"ast":null,"code":"import { LitElement, html } from 'lit-element';\nimport { getDayOfYear } from 'date-fns';\nimport { format, utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';\nimport militaryTimezones from 'military-timezones';\nexport class RuxClock extends LitElement {\n  static get properties() {\n    return {\n      aos: {\n        type: String\n      },\n      los: {\n        type: String\n      },\n      timezone: {\n        type: String,\n        reflect: true\n      },\n      hideTimezone: {\n        type: Boolean\n      },\n      hideDate: {\n        type: Boolean\n      },\n      small: {\n        type: Boolean\n      },\n      time: {\n        type: String\n      },\n      dayOfYear: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.timezone = 'UTC';\n    this._timezone = this.timezone;\n    this.tzFormat = 'z';\n    this.hideTimezone = false;\n    this.hideDate = false;\n    this.updateTime();\n  }\n  /*\n    Lifecycle hooks should occur after the constructor and before custom methods\n  */\n\n\n  connectedCallback() {\n    super.connectedCallback();\n    this._timer = setInterval(() => {\n      this.updateTime();\n    }, 1000);\n  }\n\n  disconnectedCallback() {\n    clearTimeout(this._timer);\n    super.disconnectedCallback();\n  }\n\n  updated(changedProperties) {\n    const oldZone = changedProperties.get('timezone');\n\n    if (oldZone) {\n      this.convertTimezone(this.timezone);\n    }\n  }\n  /*\n    Public functions should occur after lifecycle hooks\n  */\n\n  /*\n    Private functions should occur after public functions\n  */\n\n\n  updateTime() {\n    this.time = format(utcToZonedTime(new Date(), this._timezone), `HH:mm:ss ${this.hideTimezone ? '' : this.tzFormat}`, {\n      timeZone: this._timezone\n    });\n    this.dayOfYear = getDayOfYear(zonedTimeToUtc(new Date(), this._timezone));\n  }\n\n  convertTimezone(timezone) {\n    this._timezone = militaryTimezones[timezone.toUpperCase()];\n    this.tzFormat = 'O';\n\n    if (!this._timezone) {\n      this._timezone = timezone;\n      this.tzFormat = 'zzz';\n    } else if (timezone.toUpperCase() == 'Z') {\n      this.tzFormat = 'X';\n    }\n  }\n  /*\n    Template and styles blocks should appear as the very last code blocks\n  */\n\n\n  render() {\n    return html`\n      <style>\n        :host {\n          display: flex;\n          margin: 0 1rem;\n\n          color: var(--clockTextColor);\n\n          font-size: 1.15rem;\n\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .rux-clock__segment {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n\n        .rux-clock__segment__value {\n          display: flex;\n          align-items: center;\n          font-family: var(--fontFamilyMono);\n          font-weight: 700;\n\n          border: 1px solid var(--clockBorderColor);\n\n          background-color: var(--clockBackgroundColor);\n          margin-bottom: 0.25rem;\n\n          white-space: nowrap;\n          overflow-y: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .rux-clock__segment__value {\n          font-size: 1.75rem;\n          height: 2.75rem;\n          padding: 0 0.75rem;\n        }\n\n        :host([small]) .rux-clock__segment__value {\n          height: 2.75rem;\n          padding: 0 0.75rem;\n          font-size: 1.15rem;\n          font-weight: 500;\n        }\n\n        .rux-clock__segment__label {\n\t\t\t\t\tfont-size: 0.875rem;\n\t\t\t\t\tcolor: var(--clockLabelColor);\n        }\n\n        .rux-clock__day-of-the-year .rux-clock__segment__value {\n          border-right: none;\n        }\n\n        .rux-clock__segment--secondary .rux-clock__segment__value {\n          font-weight: 100;\n        }\n\n        .rux-clock__aos {\n          margin-left: 1em;\n        }\n\n        .rux-clock__los {\n          margin-left: 0.5em;\n        }\n      </style>\n\n      ${!this.hideDate ? html`\n            <div class=\"rux-clock__segment rux-clock__day-of-the-year\">\n              <div class=\"rux-clock__segment__value\" aria-labelledby=\"rux-clock__day-of-year-label\">\n                ${this.dayOfYear}\n              </div>\n              <div class=\"rux-clock__segment__label\" id=\"rux-clock__day-of-year-label\">Date</div>\n            </div>\n          ` : ''}\n\n      <div class=\"rux-clock__segment rux-clock__time\">\n        <div class=\"rux-clock__segment__value\" aria-labelledby=\"rux-clock__time-label\">\n          ${this.time}\n        </div>\n        <div class=\"rux-clock__segment__label\" id=\"rux-clock__time-label\">\n          Time\n        </div>\n      </div>\n\n      ${this.aos ? html`\n            <div class=\"rux-clock__segment rux-clock__segment--secondary rux-clock__aos\">\n              <div class=\"rux-clock__segment__value\" aria-labelledby=\"rux-clock__time-label--aos\">\n                ${format(utcToZonedTime(this.aos, this._timezone), 'HH:mm:ss')}\n              </div>\n              <div class=\"rux-clock__segment__label\" id=\"rux-clock__time-label--aos\">\n                AOS\n              </div>\n            </div>\n          ` : ''}\n      ${this.los ? html`\n            <div class=\"rux-clock__segment rux-clock__segment--secondary rux-clock__los\">\n              <div class=\"rux-clock__segment__value\" aria-labelledby=\"rux-clock__time-label--los\">\n              ${format(utcToZonedTime(this.los, this._timezone), 'HH:mm:ss')}\n              </div>\n              <div class=\"rux-clock__segment__label\" id=\"rux-clock__time-label--los\">\n                LOS\n              </div>\n            </div>\n          ` : ''}\n    `;\n  }\n  /* uses the lit-scss-loader to import external CSS */\n\n  /* static get styles() {\n    return css`\n      ${style}\n    `;\n  } */\n\n\n}\ncustomElements.define('rux-clock', RuxClock);","map":{"version":3,"sources":["/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/node_modules/@astrouxds/rux-clock/rux-clock.js"],"names":["LitElement","html","getDayOfYear","format","utcToZonedTime","zonedTimeToUtc","militaryTimezones","RuxClock","properties","aos","type","String","los","timezone","reflect","hideTimezone","Boolean","hideDate","small","time","dayOfYear","constructor","_timezone","tzFormat","updateTime","connectedCallback","_timer","setInterval","disconnectedCallback","clearTimeout","updated","changedProperties","oldZone","get","convertTimezone","Date","timeZone","toUpperCase","render","customElements","define"],"mappings":"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","sourcesContent":["import { LitElement, html } from 'lit-element';\n\nimport { getDayOfYear } from 'date-fns';\nimport { format, utcToZonedTime, zonedTimeToUtc} from 'date-fns-tz';\n\nimport militaryTimezones from 'military-timezones';\n\n\nexport class RuxClock extends LitElement {\n  static get properties() {\n    return {\n      aos: {\n        type: String,\n      },\n      los: {\n        type: String,\n      },\n      timezone: {\n        type: String,\n        reflect: true,\n      },\n      hideTimezone: {\n        type: Boolean,\n      },\n      hideDate: {\n        type: Boolean,\n      },\n      small: {\n        type: Boolean,\n      },\n      time: {\n        type: String,\n      },\n      dayOfYear: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.timezone = 'UTC';\n    this._timezone = this.timezone;\n    this.tzFormat = 'z';\n    this.hideTimezone = false;\n    this.hideDate = false;\n\n    this.updateTime();\n  }\n\n  /*\n    Lifecycle hooks should occur after the constructor and before custom methods\n  */\n\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this._timer = setInterval(() => {\n      this.updateTime();\n    }, 1000);\n  }\n\n  disconnectedCallback() {\n    clearTimeout(this._timer);\n    super.disconnectedCallback();\n  }\n\n  updated(changedProperties) {\n    const oldZone = changedProperties.get('timezone');\n    if (oldZone) {\n      this.convertTimezone(this.timezone);\n    }\n  }\n\n  /*\n    Public functions should occur after lifecycle hooks\n  */\n\n  /*\n    Private functions should occur after public functions\n  */\n  updateTime() {\n    this.time = format(utcToZonedTime(new Date(), this._timezone), `HH:mm:ss ${this.hideTimezone ? '' : this.tzFormat}`, {timeZone: this._timezone});\n    this.dayOfYear = getDayOfYear(zonedTimeToUtc(new Date(), this._timezone));\n  }\n\n  convertTimezone(timezone) {\n    this._timezone = militaryTimezones[timezone.toUpperCase()];\n    this.tzFormat = 'O';\n    if (!this._timezone) {\n      this._timezone = timezone;\n      this.tzFormat = 'zzz';\n    } else if (timezone.toUpperCase() == 'Z') {\n      this.tzFormat = 'X';\n    }\n  }\n\n  /*\n    Template and styles blocks should appear as the very last code blocks\n  */\n  render() {\n    return html`\n      <style>\n        :host {\n          display: flex;\n          margin: 0 1rem;\n\n          color: var(--clockTextColor);\n\n          font-size: 1.15rem;\n\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .rux-clock__segment {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n\n        .rux-clock__segment__value {\n          display: flex;\n          align-items: center;\n          font-family: var(--fontFamilyMono);\n          font-weight: 700;\n\n          border: 1px solid var(--clockBorderColor);\n\n          background-color: var(--clockBackgroundColor);\n          margin-bottom: 0.25rem;\n\n          white-space: nowrap;\n          overflow-y: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .rux-clock__segment__value {\n          font-size: 1.75rem;\n          height: 2.75rem;\n          padding: 0 0.75rem;\n        }\n\n        :host([small]) .rux-clock__segment__value {\n          height: 2.75rem;\n          padding: 0 0.75rem;\n          font-size: 1.15rem;\n          font-weight: 500;\n        }\n\n        .rux-clock__segment__label {\n\t\t\t\t\tfont-size: 0.875rem;\n\t\t\t\t\tcolor: var(--clockLabelColor);\n        }\n\n        .rux-clock__day-of-the-year .rux-clock__segment__value {\n          border-right: none;\n        }\n\n        .rux-clock__segment--secondary .rux-clock__segment__value {\n          font-weight: 100;\n        }\n\n        .rux-clock__aos {\n          margin-left: 1em;\n        }\n\n        .rux-clock__los {\n          margin-left: 0.5em;\n        }\n      </style>\n\n      ${!this.hideDate\n        ? html`\n            <div class=\"rux-clock__segment rux-clock__day-of-the-year\">\n              <div class=\"rux-clock__segment__value\" aria-labelledby=\"rux-clock__day-of-year-label\">\n                ${this.dayOfYear}\n              </div>\n              <div class=\"rux-clock__segment__label\" id=\"rux-clock__day-of-year-label\">Date</div>\n            </div>\n          `\n        : ''}\n\n      <div class=\"rux-clock__segment rux-clock__time\">\n        <div class=\"rux-clock__segment__value\" aria-labelledby=\"rux-clock__time-label\">\n          ${this.time}\n        </div>\n        <div class=\"rux-clock__segment__label\" id=\"rux-clock__time-label\">\n          Time\n        </div>\n      </div>\n\n      ${this.aos\n        ? html`\n            <div class=\"rux-clock__segment rux-clock__segment--secondary rux-clock__aos\">\n              <div class=\"rux-clock__segment__value\" aria-labelledby=\"rux-clock__time-label--aos\">\n                ${format(utcToZonedTime(this.aos, this._timezone), 'HH:mm:ss')}\n              </div>\n              <div class=\"rux-clock__segment__label\" id=\"rux-clock__time-label--aos\">\n                AOS\n              </div>\n            </div>\n          `\n        : ''}\n      ${this.los\n        ? html`\n            <div class=\"rux-clock__segment rux-clock__segment--secondary rux-clock__los\">\n              <div class=\"rux-clock__segment__value\" aria-labelledby=\"rux-clock__time-label--los\">\n              ${format(utcToZonedTime(this.los, this._timezone), 'HH:mm:ss')}\n              </div>\n              <div class=\"rux-clock__segment__label\" id=\"rux-clock__time-label--los\">\n                LOS\n              </div>\n            </div>\n          `\n        : ''}\n    `;\n  }\n\n  /* uses the lit-scss-loader to import external CSS */\n  /* static get styles() {\n    return css`\n      ${style}\n    `;\n  } */\n}\ncustomElements.define('rux-clock', RuxClock);\n"]},"metadata":{},"sourceType":"module"}