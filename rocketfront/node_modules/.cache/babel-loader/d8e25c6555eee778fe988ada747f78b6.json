{"ast":null,"code":"import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { addInstrumentationHandler, getGlobalObject, logger, SyncPromise } from '@sentry/utils';\nimport { BrowserClient } from './client';\nimport { wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\nexport var defaultIntegrations = [new CoreIntegrations.InboundFilters(), new CoreIntegrations.FunctionToString(), new TryCatch(), new Breadcrumbs(), new GlobalHandlers(), new LinkedErrors(), new UserAgent()];\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\n\nexport function init(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n\n  if (options.release === undefined) {\n    var window_1 = getGlobalObject(); // This supports the variable that sentry-webpack-plugin injects\n\n    if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) {\n      options.release = window_1.SENTRY_RELEASE.id;\n    }\n  }\n\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n\n  initAndBind(BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\n\nexport function showReportDialog(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n\n  var client = getCurrentHub().getClient();\n\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\n\nexport function lastEventId() {\n  return getCurrentHub().lastEventId();\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\n\nexport function forceLoad() {// Noop\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\n\nexport function onLoad(callback) {\n  callback();\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\n\nexport function flush(timeout) {\n  var client = getCurrentHub().getClient();\n\n  if (client) {\n    return client.flush(timeout);\n  }\n\n  return SyncPromise.reject(false);\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\n\nexport function close(timeout) {\n  var client = getCurrentHub().getClient();\n\n  if (client) {\n    return client.close(timeout);\n  }\n\n  return SyncPromise.reject(false);\n}\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function wrap(fn) {\n  return internalWrap(fn)();\n}\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\n\nfunction startSessionTracking() {\n  var window = getGlobalObject();\n  var document = window.document;\n\n  if (typeof document === 'undefined') {\n    logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  var hub = getCurrentHub();\n\n  if ('startSession' in hub) {\n    // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n    // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n    // pinned at the same version in package.json, but there are edge cases where it's possible'. See\n    // https://github.com/getsentry/sentry-javascript/issues/3234 and\n    // https://github.com/getsentry/sentry-javascript/issues/3207.\n    hub.startSession();\n    hub.captureSession(); // We want to create a session for every navigation as well\n\n    addInstrumentationHandler({\n      callback: function () {\n        hub.startSession();\n        hub.captureSession();\n      },\n      type: 'history'\n    });\n  }\n}","map":{"version":3,"sources":["../src/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { addInstrumentationHandler, getGlobalObject, logger, SyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient } from './client';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n\n  initAndBind(BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  const window = getGlobalObject<Window>();\n  const document = window.document;\n\n  if (typeof document === 'undefined') {\n    logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  if ('startSession' in hub) {\n    // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n    // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n    // pinned at the same version in package.json, but there are edge cases where it's possible'. See\n    // https://github.com/getsentry/sentry-javascript/issues/3234 and\n    // https://github.com/getsentry/sentry-javascript/issues/3207.\n\n    hub.startSession();\n    hub.captureSession();\n\n    // We want to create a session for every navigation as well\n    addInstrumentationHandler({\n      callback: () => {\n        hub.startSession();\n        hub.captureSession();\n      },\n      type: 'history',\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}