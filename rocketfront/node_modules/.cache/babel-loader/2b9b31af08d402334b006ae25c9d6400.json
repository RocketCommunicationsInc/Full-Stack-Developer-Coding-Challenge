{"ast":null,"code":"import { __read } from \"tslib\";\nimport { SentryError } from './error';\n/** Regular expression used to parse a Dsn. */\n\nvar DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n/** Error message */\n\nvar ERROR_MESSAGE = 'Invalid Dsn';\n/** The Sentry Dsn, identifying a Sentry instance and project. */\n\nvar Dsn =\n/** @class */\nfunction () {\n  /** Creates a new Dsn component */\n  function Dsn(from) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n\n\n  Dsn.prototype.toString = function (withPassword) {\n    if (withPassword === void 0) {\n      withPassword = false;\n    }\n\n    var _a = this,\n        host = _a.host,\n        path = _a.path,\n        pass = _a.pass,\n        port = _a.port,\n        projectId = _a.projectId,\n        protocol = _a.protocol,\n        publicKey = _a.publicKey;\n\n    return protocol + \"://\" + publicKey + (withPassword && pass ? \":\" + pass : '') + (\"@\" + host + (port ? \":\" + port : '') + \"/\" + (path ? path + \"/\" : path) + projectId);\n  };\n  /** Parses a string into this Dsn. */\n\n\n  Dsn.prototype._fromString = function (str) {\n    var match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    var _a = __read(match.slice(1), 6),\n        protocol = _a[0],\n        publicKey = _a[1],\n        _b = _a[2],\n        pass = _b === void 0 ? '' : _b,\n        host = _a[3],\n        _c = _a[4],\n        port = _c === void 0 ? '' : _c,\n        lastPath = _a[5];\n\n    var path = '';\n    var projectId = lastPath;\n    var split = projectId.split('/');\n\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop();\n    }\n\n    if (projectId) {\n      var projectMatch = projectId.match(/^\\d+/);\n\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({\n      host: host,\n      pass: pass,\n      path: path,\n      projectId: projectId,\n      port: port,\n      protocol: protocol,\n      publicKey: publicKey\n    });\n  };\n  /** Maps Dsn components into this instance. */\n\n\n  Dsn.prototype._fromComponents = function (components) {\n    // TODO this is for backwards compatibility, and can be removed in a future version\n    if ('user' in components && !('publicKey' in components)) {\n      components.publicKey = components.user;\n    }\n\n    this.user = components.publicKey || '';\n    this.protocol = components.protocol;\n    this.publicKey = components.publicKey || '';\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  };\n  /** Validates this Dsn and throws on error. */\n\n\n  Dsn.prototype._validate = function () {\n    var _this = this;\n\n    ['protocol', 'publicKey', 'host', 'projectId'].forEach(function (component) {\n      if (!_this[component]) {\n        throw new SentryError(ERROR_MESSAGE + \": \" + component + \" missing\");\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(ERROR_MESSAGE + \": Invalid projectId \" + this.projectId);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(ERROR_MESSAGE + \": Invalid protocol \" + this.protocol);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(ERROR_MESSAGE + \": Invalid port \" + this.port);\n    }\n  };\n\n  return Dsn;\n}();\n\nexport { Dsn };","map":{"version":3,"sources":["../src/dsn.ts"],"names":[],"mappings":"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","sourcesContent":["import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key (deprecated, renamed to publicKey). */\n  public user!: string;\n  /** Public authorization key. */\n  public publicKey!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    const { host, path, pass, port, projectId, protocol, publicKey } = this;\n    return (\n      `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n\n    if (projectId) {\n      const projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    // TODO this is for backwards compatibility, and can be removed in a future version\n    if ('user' in components && !('publicKey' in components)) {\n      components.publicKey = components.user;\n    }\n    this.user = components.publicKey || '';\n\n    this.protocol = components.protocol;\n    this.publicKey = components.publicKey || '';\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'publicKey', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(`${ERROR_MESSAGE}: ${component} missing`);\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid projectId ${this.projectId}`);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid protocol ${this.protocol}`);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid port ${this.port}`);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}