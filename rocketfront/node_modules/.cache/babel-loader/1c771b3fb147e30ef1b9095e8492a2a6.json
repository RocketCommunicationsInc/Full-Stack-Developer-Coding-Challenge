{"ast":null,"code":"import { LitElement, html } from 'lit-element';\n/* eslint-disable no-unused-vars */\n\nimport { RuxButton } from '../rux-button/rux-button.js';\n/* eslint-enable no-unused-vars */\n\nexport class RuxModal extends LitElement {\n  static get properties() {\n    return {\n      open: {\n        type: Boolean,\n        reflect: true,\n        notify: true\n      },\n      message: {\n        type: String\n      },\n      title: {\n        type: String\n      },\n      confirmText: {\n        type: String\n      },\n      denyText: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.open = false;\n    this.message = '';\n    this.title = '';\n    this.confirmText = '';\n    this.denyText = '';\n  }\n\n  connectedCallback() {\n    super.connectedCallback(); // in the event neither Confirm/Deny text is supplied provide\n    // a default cancel button to get out of the modal\n\n    if (!this.denyText && !this.confirmText) {\n      this.denyText = 'Cancel';\n      console.warn('No confirm or deny actions have been passed to the modal dialog box. User has been presented with a Cancel button');\n    }\n  }\n\n  updated() {\n    // get the total button set and set the last button as default\n    // and add focus\n    const buttonSet = this.shadowRoot.querySelectorAll('rux-button:not([hidden])');\n\n    if (buttonSet.length > 0) {\n      const defaultButton = buttonSet[buttonSet.length - 1];\n      defaultButton.setAttribute('tabindex', 0);\n      defaultButton.focus();\n    } else {}\n  }\n\n  _handleModalChoice(e) {\n    // convert string value to boolean\n    const choice = e.currentTarget.dataset.value === 'true'; // dispatch event\n\n    this.dispatchEvent(new CustomEvent('modalClosed', {\n      detail: {\n        confirm: choice\n      },\n      bubbles: true,\n      composed: true\n    })); // close dialog\n\n    this.open = false;\n  }\n\n  render() {\n    return html`\n      <style>\n        :host {\n          display: none;\n          box-sizing: border-box;\n        }\n\n        :host([open]) {\n          display: block;\n        }\n\n        *,\n        *:before,\n        *:after {\n          box-sizing: inherit;\n        }\n\n        *[hidden] {\n          display: none !important;\n        }\n\n        .rux-button-group {\n          margin-top: auto;\n          margin-left: auto;\n          align-self: flex-end;\n        }\n\n        .rux-button-group rux-button:not(:last-child) {\n          margin-right: 0.375rem;\n        }\n\n        .rux-modal-container {\n          position: fixed;\n          top: 0;\n          left: 0;\n          height: 100vh;\n          width: 100vw;\n\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          z-index: 11001;\n        }\n\n        .rux-modal {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n\n          background-color: var(--modalBackgroundColor);\n\n          width: 28rem;\n          height: 13.5rem;\n          border: 2px solid var(--modalBorderColor);\n\n          border-radius: 4px;\n          margin: auto;\n          padding: 0;\n\n          user-select: none;\n\n          box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 3px rgba(0, 0, 0, 0.12),\n            0 4px 5px 0 rgba(0, 0, 0, 0.2);\n        }\n\n        .rux-modal__titlebar {\n          display: flex;\n          flex-grow: 0;\n          flex-shrink: 0;\n          justify-content: center;\n          align-items: center;\n\n          width: 100%;\n          height: 2rem;\n\n          background-color: var(--modalBorderColor);\n          user-select: none;\n          cursor: move;\n        }\n\n        .rux-modal__titlebar h1 {\n          font-size: 1rem;\n          font-weight: 600;\n          line-height: 1.2;\n          padding: 0;\n          margin: 0;\n          color: var(--modalTitleColor);\n        }\n\n        .rux-modal__content {\n          display: flex;\n          flex-direction: column;\n          flex-grow: 1;\n          padding: 1rem;\n          color: var(--defaultText);\n        }\n\n        rux-icon {\n          margin-right: 0.75rem;\n        }\n\n        .rux-modal__message {\n          margin: 0.5rem 1.875rem 2.5rem 1.875rem;\n        }\n\n        .rux-modal .rux-button {\n          box-shadow: none !important;\n        }\n\n        .rux-modal::before {\n          content: '';\n          position: fixed;\n          top: 0;\n          left: 0;\n          height: 100vh;\n          width: 100vw;\n          background-color: rgba(0, 0, 0, 0.5);\n          z-index: -1;\n        }\n      </style>\n\n      <div class=\"rux-modal-container\">\n        <dialog class=\"rux-modal\" role=\"dialog\" ?open=\"${this.open}\">\n          <header class=\"rux-modal__titlebar\">\n            <h1>${this.title}</h1>\n          </header>\n          <div class=\"rux-modal__content\">\n            <div class=\"rux-modal__message\">\n              ${this.message}\n            </div>\n            <div class=\"rux-button-group\">\n              <rux-button\n                ?outline=\"${this.confirmText.length > 0}\"\n                @click=\"${this._handleModalChoice}\"\n                data-value=\"false\"\n                ?hidden=\"${!this.denyText}\"\n                tabindex=\"-1\"\n              >\n                ${this.denyText}\n              </rux-button>\n              <rux-button\n                @click=\"${this._handleModalChoice}\"\n                data-value=\"true\"\n                ?hidden=\"${!this.confirmText}\"\n                tabindex=\"0\"\n              >\n                ${this.confirmText}\n              </rux-button>\n            </div>\n          </div>\n        </dialog>\n      </div>\n    `;\n  }\n\n}\ncustomElements.define('rux-modal', RuxModal);","map":{"version":3,"sources":["/home/mimirandi21/code/projects/Full-Stack-Developer-Coding-Challenge-1/rocketfront/node_modules/@astrouxds/rux-modal/rux-modal.js"],"names":["LitElement","html","RuxButton","RuxModal","properties","open","type","Boolean","reflect","notify","message","String","title","confirmText","denyText","constructor","connectedCallback","console","warn","updated","buttonSet","shadowRoot","querySelectorAll","length","defaultButton","setAttribute","focus","_handleModalChoice","e","choice","currentTarget","dataset","value","dispatchEvent","CustomEvent","detail","confirm","bubbles","composed","render","customElements","define"],"mappings":"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","sourcesContent":["import { LitElement, html } from 'lit-element';\n/* eslint-disable no-unused-vars */\nimport { RuxButton } from '../rux-button/rux-button.js';\n/* eslint-enable no-unused-vars */\n\nexport class RuxModal extends LitElement {\n  static get properties() {\n    return {\n      open: {\n        type: Boolean,\n        reflect: true,\n        notify: true,\n      },\n      message: {\n        type: String,\n      },\n      title: {\n        type: String,\n      },\n      confirmText: {\n        type: String,\n      },\n      denyText: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.open = false;\n    this.message = '';\n    this.title = '';\n    this.confirmText = '';\n    this.denyText = '';\n  }\n  connectedCallback() {\n    super.connectedCallback();\n\n    // in the event neither Confirm/Deny text is supplied provide\n    // a default cancel button to get out of the modal\n    if (!this.denyText && !this.confirmText) {\n      this.denyText = 'Cancel';\n      console.warn(\n          'No confirm or deny actions have been passed to the modal dialog box. User has been presented with a Cancel button'\n      );\n    }\n  }\n  updated() {\n    // get the total button set and set the last button as default\n    // and add focus\n    const buttonSet = this.shadowRoot.querySelectorAll('rux-button:not([hidden])');\n    if (buttonSet.length > 0) {\n      const defaultButton = buttonSet[buttonSet.length - 1];\n      defaultButton.setAttribute('tabindex', 0);\n      defaultButton.focus();\n    } else {\n    }\n  }\n\n  _handleModalChoice(e) {\n    // convert string value to boolean\n    const choice = e.currentTarget.dataset.value === 'true';\n\n    // dispatch event\n    this.dispatchEvent(\n        new CustomEvent('modalClosed', {\n          detail: { confirm: choice },\n          bubbles: true,\n          composed: true,\n        })\n    );\n\n    // close dialog\n    this.open = false;\n  }\n\n  render() {\n    return html`\n      <style>\n        :host {\n          display: none;\n          box-sizing: border-box;\n        }\n\n        :host([open]) {\n          display: block;\n        }\n\n        *,\n        *:before,\n        *:after {\n          box-sizing: inherit;\n        }\n\n        *[hidden] {\n          display: none !important;\n        }\n\n        .rux-button-group {\n          margin-top: auto;\n          margin-left: auto;\n          align-self: flex-end;\n        }\n\n        .rux-button-group rux-button:not(:last-child) {\n          margin-right: 0.375rem;\n        }\n\n        .rux-modal-container {\n          position: fixed;\n          top: 0;\n          left: 0;\n          height: 100vh;\n          width: 100vw;\n\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          z-index: 11001;\n        }\n\n        .rux-modal {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n\n          background-color: var(--modalBackgroundColor);\n\n          width: 28rem;\n          height: 13.5rem;\n          border: 2px solid var(--modalBorderColor);\n\n          border-radius: 4px;\n          margin: auto;\n          padding: 0;\n\n          user-select: none;\n\n          box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 3px rgba(0, 0, 0, 0.12),\n            0 4px 5px 0 rgba(0, 0, 0, 0.2);\n        }\n\n        .rux-modal__titlebar {\n          display: flex;\n          flex-grow: 0;\n          flex-shrink: 0;\n          justify-content: center;\n          align-items: center;\n\n          width: 100%;\n          height: 2rem;\n\n          background-color: var(--modalBorderColor);\n          user-select: none;\n          cursor: move;\n        }\n\n        .rux-modal__titlebar h1 {\n          font-size: 1rem;\n          font-weight: 600;\n          line-height: 1.2;\n          padding: 0;\n          margin: 0;\n          color: var(--modalTitleColor);\n        }\n\n        .rux-modal__content {\n          display: flex;\n          flex-direction: column;\n          flex-grow: 1;\n          padding: 1rem;\n          color: var(--defaultText);\n        }\n\n        rux-icon {\n          margin-right: 0.75rem;\n        }\n\n        .rux-modal__message {\n          margin: 0.5rem 1.875rem 2.5rem 1.875rem;\n        }\n\n        .rux-modal .rux-button {\n          box-shadow: none !important;\n        }\n\n        .rux-modal::before {\n          content: '';\n          position: fixed;\n          top: 0;\n          left: 0;\n          height: 100vh;\n          width: 100vw;\n          background-color: rgba(0, 0, 0, 0.5);\n          z-index: -1;\n        }\n      </style>\n\n      <div class=\"rux-modal-container\">\n        <dialog class=\"rux-modal\" role=\"dialog\" ?open=\"${this.open}\">\n          <header class=\"rux-modal__titlebar\">\n            <h1>${this.title}</h1>\n          </header>\n          <div class=\"rux-modal__content\">\n            <div class=\"rux-modal__message\">\n              ${this.message}\n            </div>\n            <div class=\"rux-button-group\">\n              <rux-button\n                ?outline=\"${this.confirmText.length > 0}\"\n                @click=\"${this._handleModalChoice}\"\n                data-value=\"false\"\n                ?hidden=\"${!this.denyText}\"\n                tabindex=\"-1\"\n              >\n                ${this.denyText}\n              </rux-button>\n              <rux-button\n                @click=\"${this._handleModalChoice}\"\n                data-value=\"true\"\n                ?hidden=\"${!this.confirmText}\"\n                tabindex=\"0\"\n              >\n                ${this.confirmText}\n              </rux-button>\n            </div>\n          </div>\n        </dialog>\n      </div>\n    `;\n  }\n}\ncustomElements.define('rux-modal', RuxModal);\n"]},"metadata":{},"sourceType":"module"}