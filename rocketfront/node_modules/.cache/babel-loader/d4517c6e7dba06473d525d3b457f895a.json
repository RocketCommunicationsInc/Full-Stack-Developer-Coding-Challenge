{"ast":null,"code":"// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n\n/** JSDoc */\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1); // eslint-disable-next-line no-plusplus\n\n      up++;\n    } else if (up) {\n      parts.splice(i, 1); // eslint-disable-next-line no-plusplus\n\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (allowAboveRoot) {\n    // eslint-disable-next-line no-plusplus\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n} // Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\n\n\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\n\nfunction splitPath(filename) {\n  var parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n} // path.resolve([from ...], to)\n// posix version\n\n/** JSDoc */\n\n\nexport function resolve() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resolvedPath = '';\n  var resolvedAbsolute = false;\n\n  for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = i >= 0 ? args[i] : '/'; // Skip empty entries\n\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + \"/\" + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  } // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n  // Normalize the path\n\n\n  resolvedPath = normalizeArray(resolvedPath.split('/').filter(function (p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n/** JSDoc */\n\nfunction trim(arr) {\n  var start = 0;\n\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  var end = arr.length - 1;\n\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n\n  return arr.slice(start, end - start + 1);\n} // path.relative(from, to)\n// posix version\n\n/** JSDoc */\n\n\nexport function relative(from, to) {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n  /* eslint-enable no-param-reassign */\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n} // path.normalize(path)\n// posix version\n\n/** JSDoc */\n\nexport function normalizePath(path) {\n  var isPathAbsolute = isAbsolute(path);\n  var trailingSlash = path.substr(-1) === '/'; // Normalize the path\n\n  var normalizedPath = normalizeArray(path.split('/').filter(function (p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n} // posix version\n\n/** JSDoc */\n\nexport function isAbsolute(path) {\n  return path.charAt(0) === '/';\n} // posix version\n\n/** JSDoc */\n\nexport function join() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return normalizePath(args.join('/'));\n}\n/** JSDoc */\n\nexport function dirname(path) {\n  var result = splitPath(path);\n  var root = result[0];\n  var dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n/** JSDoc */\n\nexport function basename(path, ext) {\n  var f = splitPath(path)[2];\n\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n\n  return f;\n}","map":{"version":3,"sources":["../src/path.ts"],"names":[],"mappings":"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","sourcesContent":["// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    // eslint-disable-next-line no-plusplus\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  const parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.substr(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0];\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2];\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}